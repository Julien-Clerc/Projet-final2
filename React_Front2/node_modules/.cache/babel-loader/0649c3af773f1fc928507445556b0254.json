{"ast":null,"code":"var _jsxFileName = \"/home/julien/Rendu/ETP/React_Front/src/Components/Home.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport React, { useRef, useState, Component } from 'react';\nimport * as THREE from 'three';\nimport { Canvas, useFrame } from 'react-three-fiber';\nimport { softShadows, Sky, Stars, OrbitControls } from \"@react-three/drei\";\nimport { useSpring, a } from 'react-spring/three';\nimport JSONfont from \"../fonts/Cocogoose.json\"; //JSX\n\nimport Farm from \"./three/Farm.jsx\";\nimport Twitter from \"./three/TwitterBird.jsx\";\nimport Trees from \"./three/Feuillage.jsx\";\nimport Text from \"./three/Text.jsx\";\nimport Map from \"./three/Map.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar night = false; //const hourtest = 12\n\nconst treecolors = ['#2c9400', '#1b4f08', '#e6b522'];\nconst cloudcolors = ['#ffffff'];\nconst raincolors = ['#000000'];\n\nfunction azimuth() {\n  //Get current geographic hour\n  var d = new Date(); //get current hour\n\n  var currenthour = d.getHours(); //console.log(\"CurrentHour :\"+currenthour)\n  //get by API\n\n  let daystart = 6; //heure de début de journée\n\n  let daylength = Math.round(12); //longueur du jour\n  //currenthour = hourtest\n  //Ex : Valeur de départ Azimuth: 0.1171\n  //Ex : Valeur de fin Azimuth: 0.3882\n  //Ex : longueur totale de la translation d'azimuth : 0.3882 - 0.1171\n\n  let total = 0.5; //déclaration de la valeur courante\n\n  let azimuthNow;\n  azimuthNow = total * (currenthour - daystart) / daylength; //sets night to true if night it is\n\n  if (currenthour > daylength + daystart - 1 || currenthour < daylength) {\n    night = true;\n    console.log(\"NIGHT : \" + night);\n  } else {\n    night = false;\n    console.log(\"NIGHT : \" + night);\n  } //console.log(azimuthNow)\n  //console.log(\"AZIMUTH NOW: \"+azimuthNow)\n\n\n  return azimuthNow;\n}\n\nfunction inclination() {\n  //Get current geographic hour\n  var d = new Date(); //get current hour\n\n  var currenthour = d.getHours(); //console.log(n)\n  //get by API\n\n  let daystart = 6; //heure de début de journée\n\n  let daylength = Math.round(12); //longueur du jour\n\n  let noon = daylength / 2 + daystart; //midi = la moitié de la journée de soleil + l'heure de démarrage\n  //soit pour un jour d'ensoleillement de 11h = 11/2 + 6 = 11.5\n  //currenthour = hourtest\n  //Ex : Valeur de départ Inclination: 0.1171\n  //Ex : Valeur de fin Inclination: 0.3882\n  //Ex : longueur totale de la translation d'azimuth : 0.3882 - 0.1171\n\n  let total = 0.5 - 0.388; //déclaration de la valeur courante\n\n  let inclinationNow;\n\n  if (currenthour < noon) {\n    inclinationNow = (currenthour - daystart) * total / (daylength / 2);\n  } else {\n    let diffHour = noon - (currenthour - noon);\n    inclinationNow = (diffHour - daystart) * total / (daylength / 2);\n  } //console.log(\"INCLINATION NOW: \"+inclinationNow + 0.50)\n\n\n  return inclinationNow + 0.50;\n  /*\n  azimuth\n  0.1171\n  0.3882\n   inclination\n  0.5\n  0.388\n  0.5\n   exposure\n  0.1171   */\n} // soft Shadows\n\n\nsoftShadows(); //globals\n\nvar forestNumber = [];\nconst numbertrees = 300;\nconst numberclouds = 100; //text\n\nfunction TextMesh(props, text, position) {\n  _s();\n\n  const [hovered, setHover] = useState(false);\n  const mesh = useRef();\n  console.log(\"PROPS TEXT : \" + props.text); // actions to perform in current frame\n\n  useFrame(() => {//mesh.current.rotation.x = mesh.current.rotation.y += 0.01;\n    //mesh.current.geometry.center();\n  }); // load in font\n\n  const font = new THREE.FontLoader().parse(JSONfont); // configure font mesh\n\n  const textOptions = {\n    font,\n    size: 100,\n    height: hovered ? 1 : 0\n  }; //qqch qui ne se fait pas dans le update !!!!!!!!!!!\n\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: mesh,\n    onPointerOver: e => setHover(true),\n    onPointerOut: e => setHover(false),\n    position: [-200, -50, -200],\n    children: [/*#__PURE__*/_jsxDEV(\"textGeometry\", {\n      attach: \"geometry\",\n      args: [props.text, textOptions]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: hovered ? 'black' : 'white'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 7\n  }, this);\n}\n\n_s(TextMesh, \"pZoFiL+AhwNGXYX88bRkaCDUxQ0=\", false, function () {\n  return [useFrame];\n});\n\n_c = TextMesh;\n\nconst Rain = ({\n  position,\n  color,\n  args,\n  numberrain\n}) => {\n  _s2();\n\n  var rainpositions = [];\n\n  for (let i = 0; i < numberrain; i++) {\n    let rainNewPosX = getRandomInt(45);\n    let rainNewPosZ = getRandomInt(45);\n    let object = {\n      x: rainNewPosX,\n      y: 40 + getRandomInt(10),\n      z: rainNewPosZ\n    };\n    rainpositions.push(object);\n  } //ref to target the mesh\n\n\n  const grouprain = useRef(); //useFrame allows us to re-render/update on each frame\n\n  useFrame(() => {\n    if (grouprain.current == null) {//console.log(\"grouprain null\")\n    } else {\n      if (grouprain.current.position.y >= -40) {\n        grouprain.current.position.y = grouprain.current.position.y -= 1.2;\n      } else {\n        grouprain.current.position.y = 5;\n      }\n    }\n  }); //Basic expand state\n\n  const [expand, setExpand] = useState(false); // React spring expand animation\n\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1]\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: grouprain,\n    children: rainpositions.map((d, index) => /*#__PURE__*/_jsxDEV(a.mesh, {\n      position: [d.x, d.y, d.z],\n      onClick: () => setExpand(!expand),\n      scale: props.scale,\n      castShadow: true,\n      children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n        attach: \"geometry\",\n        args: args\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Rain, \"Wn/qMzlGESBwGJNXW4NfiykU2s8=\", false, function () {\n  return [useFrame, useSpring];\n});\n\n_c2 = Rain;\n\nconst Snow = ({\n  position,\n  color,\n  args,\n  numbersnow\n}) => {\n  _s3();\n\n  var snowpositions = [];\n\n  for (let i = 0; i < numbersnow; i++) {\n    let snowNewPosX = getRandomInt(45);\n    let snowNewPosZ = getRandomInt(45);\n    let object = {\n      x: snowNewPosX,\n      y: 40 + getRandomInt(10),\n      z: snowNewPosZ\n    };\n    snowpositions.push(object);\n  } //ref to target the mesh\n\n\n  const groupsnow = useRef(); //useFrame allows us to re-render/update on each frame\n\n  useFrame(() => {\n    if (groupsnow.current == null) {\n      console.log(\"groupsnow null\");\n    } else {\n      if (groupsnow.current.position.y >= -40) {\n        groupsnow.current.position.y = groupsnow.current.position.y -= 1.2;\n      } else {\n        groupsnow.current.position.y = 5;\n      }\n    }\n  }); //Basic expand state\n\n  const [expand, setExpand] = useState(false); // React spring expand animation\n\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1]\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: groupsnow,\n    children: snowpositions.map((d, index) => /*#__PURE__*/_jsxDEV(a.mesh, {\n      position: [d.x, d.y, d.z],\n      onClick: () => setExpand(!expand),\n      scale: props.scale,\n      castShadow: true,\n      children: [/*#__PURE__*/_jsxDEV(\"sphereBufferGeometry\", {\n        attach: \"geometry\",\n        args: args\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 5\n  }, this);\n};\n\n_s3(Snow, \"zjDNZtiztTWhXaAO2miUzky1LUc=\", false, function () {\n  return [useFrame, useSpring];\n});\n\n_c3 = Snow;\n\nfunction Clouds(props, color, number) {\n  _s4();\n\n  var cloudpositions = [];\n\n  for (let i = 0; i < props.number; i++) {\n    let cloudNewPosX = getRandomInt(45);\n    let cloudNewPosY = 50 + getRandomInt(15);\n    let cloudNewPosZ = getRandomInt(45);\n    let object = {\n      x: cloudNewPosX,\n      y: cloudNewPosY,\n      z: cloudNewPosZ\n    };\n    cloudpositions.push(object);\n  }\n\n  const groupclouds = useRef(); //Basic expand state\n\n  const [expand, setExpand] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: groupclouds,\n    children: cloudpositions.map((d, index) => /*#__PURE__*/_jsxDEV(a.mesh, {\n      position: [d.x, d.y, d.z],\n      onClick: () => setExpand(!expand),\n      scale: [20, 8, 20],\n      castShadow: true,\n      receiveshadow: true,\n      children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n        attach: \"geometry\",\n        args: d.args\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(a.meshPhysicalMaterial, {\n        attach: \"material\",\n        color: props.color,\n        roughness: 0,\n        opacity: 0.8,\n        transparent: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 290,\n    columnNumber: 5\n  }, this);\n}\n\n_s4(Clouds, \"ANRg2MJNTwX2sqhH3NThDy2bUsU=\");\n\n_c4 = Clouds;\n\nfunction Lights() {\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: [/*#__PURE__*/_jsxDEV(\"pointLight\", {\n      intensity: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.3\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"spotLight\", {\n      castShadow: true,\n      intensity: 0.1,\n      angle: Math.PI / 7,\n      position: [150, 150, 250],\n      penumbra: 1,\n      \"shadow-mapSize-width\": 2048,\n      \"shadow-mapSize-height\": 2048\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 309,\n    columnNumber: 5\n  }, this);\n}\n\n_c5 = Lights;\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max)) - Math.floor(Math.random() * Math.floor(max));\n}\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Canvas, {\n      style: {\n        height: \"100vh\",\n        width: \"100vw\",\n        backgroundColor: \"#abfff5\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Sky, {\n        distance: 45000 // Camera distance (default=450000)\n        ,\n        inclination: inclination() // Sun elevation angle from 0 to 1 (default=0)\n        ,\n        azimuth: azimuth() // Sun rotation around the Y axis from 0 to 1 (default=0.25)\n        ,\n        turbidity: 20,\n        rayleigh: 4,\n        exposure: 1000\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Lights, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Trees, {\n        treecolor: this.props.treecolor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Clouds, {\n        color: this.props.cloudscolor,\n        number: this.props.numberclouds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        location: this.props.location\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Snow, {\n        color: \"white\",\n        args: [1, 1, 1],\n        numbersnow: this.props.snow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Rain, {\n        color: \"grey\",\n        args: [0.3, 10, 0.3],\n        numberrain: this.props.rain\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Map, {\n        terraincolor: this.props.terraincolor,\n        fieldcolor: this.props.fieldcolor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 13\n      }, this), night = true && /*#__PURE__*/_jsxDEV(Stars, {\n        radius: 200 // Radius of the inner sphere (default=100)\n        ,\n        depth: 50 // Depth of area where stars should fit (default=50)\n        ,\n        count: 5000 // Amount of stars (default=5000)\n        ,\n        factor: 4 // Size factor (default=4)\n        ,\n        saturation: 0 // Saturation 0-1 (default=0)\n        ,\n        fade: true // Faded dots (default=false)\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Farm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Twitter, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Home;\n/*<Stars\nradius={100} // Radius of the inner sphere (default=100)\ndepth={50} // Depth of area where stars should fit (default=50)\ncount={5000} // Amount of stars (default=5000)\nfactor={4} // Size factor (default=4)\nsaturation={0} // Saturation 0-1 (default=0)\nfade // Faded dots (default=false)\n\n  \n            <Farm />\n\n            <Rain\n                color='grey'\n                args={[0.3, 10, 0.3]}\n                numberrain = {this.props.rain}\n            />\n            <Snow\n                color='white'\n                args={[1, 1, 1]}\n                numbersnow = {this.props.snow}\n            />\n            <Suspense fallback={null}>\n              <TwitterBird position={[100, 100, 10]} rotation={[-0.5, 0.5, 0]}/>\n            </Suspense>\n<Groupfarm scale={[0.02, 0.02, 0.02]} position={[3, 5, -3]}/>\n            \n\n/>*/\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"TextMesh\");\n$RefreshReg$(_c2, \"Rain\");\n$RefreshReg$(_c3, \"Snow\");\n$RefreshReg$(_c4, \"Clouds\");\n$RefreshReg$(_c5, \"Lights\");","map":{"version":3,"sources":["/home/julien/Rendu/ETP/React_Front/src/Components/Home.jsx"],"names":["React","useRef","useState","Component","THREE","Canvas","useFrame","softShadows","Sky","Stars","OrbitControls","useSpring","a","JSONfont","Farm","Twitter","Trees","Text","Map","night","treecolors","cloudcolors","raincolors","azimuth","d","Date","currenthour","getHours","daystart","daylength","Math","round","total","azimuthNow","console","log","inclination","noon","inclinationNow","diffHour","forestNumber","numbertrees","numberclouds","TextMesh","props","text","position","hovered","setHover","mesh","font","FontLoader","parse","textOptions","size","height","e","Rain","color","args","numberrain","rainpositions","i","rainNewPosX","getRandomInt","rainNewPosZ","object","x","y","z","push","grouprain","current","expand","setExpand","scale","map","index","Snow","numbersnow","snowpositions","snowNewPosX","snowNewPosZ","groupsnow","Clouds","number","cloudpositions","cloudNewPosX","cloudNewPosY","cloudNewPosZ","groupclouds","Lights","PI","max","floor","random","Home","constructor","render","width","backgroundColor","treecolor","cloudscolor","location","snow","rain","terraincolor","fieldcolor"],"mappings":"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","sourcesContent":["import React, { useRef, useState, Component } from 'react'\nimport * as THREE from 'three'\nimport { Canvas, useFrame } from 'react-three-fiber'\nimport { softShadows, Sky, Stars, OrbitControls } from \"@react-three/drei\";\nimport { useSpring, a } from 'react-spring/three'\nimport JSONfont from \"../fonts/Cocogoose.json\";\n//JSX\nimport Farm from \"./three/Farm.jsx\"\nimport Twitter from \"./three/TwitterBird.jsx\"\nimport Trees from \"./three/Feuillage.jsx\"\nimport Text from \"./three/Text.jsx\"\nimport Map from \"./three/Map.jsx\"\n\nvar night = false\n//const hourtest = 12\n\n\nconst treecolors = ['#2c9400', '#1b4f08', '#e6b522']\nconst cloudcolors = ['#ffffff']\nconst raincolors = ['#000000']\n\nfunction azimuth(){\n  //Get current geographic hour\n  var d = new Date();\n  //get current hour\n  var currenthour = d.getHours();\n  //console.log(\"CurrentHour :\"+currenthour)\n  //get by API\n  let daystart = 6; //heure de début de journée\n  let daylength = Math.round(12) //longueur du jour\n\n  //currenthour = hourtest\n\n  //Ex : Valeur de départ Azimuth: 0.1171\n  //Ex : Valeur de fin Azimuth: 0.3882\n  //Ex : longueur totale de la translation d'azimuth : 0.3882 - 0.1171\n  let total = 0.5\n\n  //déclaration de la valeur courante\n  let azimuthNow\n\n  azimuthNow = (total * (currenthour-daystart))/daylength\n\n  //sets night to true if night it is\n  if ( (currenthour > (daylength + daystart)-1)||(currenthour < daylength) ){\n    night = true\n    console.log(\"NIGHT : \"+night)\n  }\n  else\n  {\n    night = false\n    console.log(\"NIGHT : \"+night)\n  }\n\n  //console.log(azimuthNow)\n  //console.log(\"AZIMUTH NOW: \"+azimuthNow)\n  return azimuthNow\n}\n\nfunction inclination(){\n  //Get current geographic hour\n  var d = new Date();\n  //get current hour\n  var currenthour = d.getHours();\n  //console.log(n)\n\n  //get by API\n  let daystart = 6; //heure de début de journée\n  let daylength = Math.round(12) //longueur du jour\n  let noon = daylength/2 + daystart //midi = la moitié de la journée de soleil + l'heure de démarrage\n  //soit pour un jour d'ensoleillement de 11h = 11/2 + 6 = 11.5\n\n  //currenthour = hourtest\n\n  //Ex : Valeur de départ Inclination: 0.1171\n  //Ex : Valeur de fin Inclination: 0.3882\n  //Ex : longueur totale de la translation d'azimuth : 0.3882 - 0.1171\n  let total = 0.5 - 0.388\n\n  //déclaration de la valeur courante\n  let inclinationNow\n\n  if (currenthour < noon) {\n    inclinationNow = (currenthour - daystart) * total / (daylength/2);\n  }\n  else\n  {\n    let diffHour = noon - (currenthour - noon)\n    inclinationNow = (diffHour - daystart) * total / (daylength/2);\n  }\n\n  //console.log(\"INCLINATION NOW: \"+inclinationNow + 0.50)\n  return inclinationNow + 0.50\n  /*\n  azimuth\n  0.1171\n  0.3882\n\n  inclination\n  0.5\n  0.388\n  0.5\n\n  exposure\n  0.1171   */\n}\n\n// soft Shadows\nsoftShadows();\n\n//globals\nvar forestNumber = []\nconst numbertrees = 300\nconst numberclouds = 100\n\n//text\nfunction TextMesh(props, text, position) {\n    const [hovered, setHover] = useState(false);\n    const mesh = useRef();\n    console.log(\"PROPS TEXT : \"+props.text)\n  \n    // actions to perform in current frame\n    useFrame(() => {\n      //mesh.current.rotation.x = mesh.current.rotation.y += 0.01;\n      //mesh.current.geometry.center();\n    });\n    \n    // load in font\n    const font = new THREE.FontLoader().parse(JSONfont);\n  \n    // configure font mesh\n    const textOptions = {\n      font,\n      size: 100,\n      height: hovered ? 1 : 0\n    };\n    //qqch qui ne se fait pas dans le update !!!!!!!!!!!\n  \n    return (\n      <mesh\n        ref={mesh}\n        onPointerOver={(e) => setHover(true)}\n        onPointerOut={(e) => setHover(false)}\n        position={[-200, -50, -200]}\n      >\n        <textGeometry  attach=\"geometry\" args={[props.text, textOptions]} />\n        <meshBasicMaterial color={hovered ? 'black' : 'white'} />\n      </mesh>\n    );\n  }\n\n\nconst Rain = ({ position, color, args, numberrain }) => {\n\n  var rainpositions = []\n  for (let i = 0; i < numberrain; i++) {\n      let rainNewPosX = getRandomInt(45);\n      let rainNewPosZ = getRandomInt(45); \n      let object = {\n        x: rainNewPosX,\n        y: 40+getRandomInt(10),\n        z: rainNewPosZ\n      }\n      rainpositions.push(object)\n  }\n\n\n  //ref to target the mesh\n  const grouprain = useRef();\n\n  //useFrame allows us to re-render/update on each frame\n  useFrame(() => {\n    if (grouprain.current == null ){\n      //console.log(\"grouprain null\")\n    }\n    else\n    {\n      if (grouprain.current.position.y >= -40){\n        grouprain.current.position.y = grouprain.current.position.y -= 1.2\n      }\n      else\n      {\n        grouprain.current.position.y = 5;\n      }\n    }\n  });\n\n  //Basic expand state\n  const [expand, setExpand] = useState(false);\n  // React spring expand animation\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1],\n  });\n  return  (\n    <group ref={grouprain}>\n      { rainpositions.map((d, index) =>  (\n      <a.mesh\n        position={[d.x, d.y, d.z]}\n        key={index}\n        onClick={() => setExpand(!expand)}\n        scale={props.scale}\n        castShadow>\n        <boxBufferGeometry attach='geometry' args={args} />\n        <meshBasicMaterial color={color} />\n      </a.mesh>\n    ))}\n    </group>\n  );\n};\n\nconst Snow = ({ position, color, args, numbersnow }) => {\n\n  var snowpositions = []\n  for (let i = 0; i < numbersnow; i++) {\n      let snowNewPosX = getRandomInt(45);\n      let snowNewPosZ = getRandomInt(45); \n      let object = {\n        x: snowNewPosX,\n        y: 40+getRandomInt(10),\n        z: snowNewPosZ\n      }\n      snowpositions.push(object)\n  }\n\n\n  //ref to target the mesh\n  const groupsnow = useRef();\n\n  //useFrame allows us to re-render/update on each frame\n  useFrame(() => {\n    if (groupsnow.current == null ){\n      console.log(\"groupsnow null\")\n    }\n    else\n    {\n      if (groupsnow.current.position.y >= -40){\n        groupsnow.current.position.y = groupsnow.current.position.y -= 1.2\n      }\n      else\n      {\n        groupsnow.current.position.y = 5;\n      }\n    }\n  });\n\n  //Basic expand state\n  const [expand, setExpand] = useState(false);\n  // React spring expand animation\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1],\n  });\n  return  (\n    <group ref={groupsnow}>\n      { snowpositions.map((d, index) =>  (\n      <a.mesh\n        position={[d.x, d.y, d.z]}\n        key={index}\n        onClick={() => setExpand(!expand)}\n        scale={props.scale}\n        castShadow>\n        <sphereBufferGeometry attach='geometry' args={args} />\n        <meshBasicMaterial color={color} />\n      </a.mesh>\n    ))}\n    </group>\n  );\n};\n\nfunction Clouds(props, color, number) {\n\n  var cloudpositions = []\n  for (let i = 0; i < props.number; i++) {\n      let cloudNewPosX = getRandomInt(45);\n      let cloudNewPosY = 50+getRandomInt(15); \n      let cloudNewPosZ = getRandomInt(45);\n      let object = {\n        x: cloudNewPosX,\n        y: cloudNewPosY,\n        z: cloudNewPosZ\n      } \n      cloudpositions.push(object)\n  }\n\n  const groupclouds = useRef();\n\n  //Basic expand state\n  const [expand, setExpand] = useState(false);\n\n  return  (\n    <group ref={groupclouds}>\n      { cloudpositions.map((d, index) =>  (\n      <a.mesh\n        position={[d.x, d.y, d.z]}\n        key={index}\n        onClick={() => setExpand(!expand)}\n        scale={[ 20, 8, 20 ]}\n        castShadow\n        receiveshadow>\n        <boxBufferGeometry attach=\"geometry\" args={d.args} />\n        <a.meshPhysicalMaterial attach=\"material\" color={props.color} roughness={0} opacity={0.8} transparent={true} />\n      </a.mesh>\n    ))}\n    </group>\n  );\n}\n\nfunction Lights() {\n  return (\n    <group>\n      <pointLight intensity={1} />\n      <ambientLight intensity={0.3} />\n      <spotLight\n        castShadow\n        intensity={0.1}\n        angle={Math.PI / 7}\n        position={[150, 150, 250]}\n        penumbra={1}\n        shadow-mapSize-width={2048}\n        shadow-mapSize-height={2048}\n      />\n    </group>\n  )\n}\n\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max)) - Math.floor(Math.random() * Math.floor(max));\n}\n\nclass Home extends Component {\n    constructor(props){\n        super(props)\n    }\n    render(){\n        return(\n            <Canvas style={{height:\"100vh\",width:\"100vw\",backgroundColor:\"#abfff5\"}}>\n            <Sky\n              distance={45000} // Camera distance (default=450000)\n              inclination={inclination()} // Sun elevation angle from 0 to 1 (default=0)\n              azimuth={azimuth()} // Sun rotation around the Y axis from 0 to 1 (default=0.25)\n              turbidity={20}\n              rayleigh={4}\n              exposure={1000}\n            />\n            <Lights />\n            <OrbitControls />\n            <Trees treecolor={this.props.treecolor}/>\n            <Clouds color={this.props.cloudscolor} number={this.props.numberclouds}/>\n            <Text location={this.props.location}/>\n            <Snow\n                color='white'\n                args={[1, 1, 1]}\n                numbersnow = {this.props.snow}\n            />\n            <Rain\n                color='grey'\n                args={[0.3, 10, 0.3]}\n                numberrain = {this.props.rain}\n            />\n            <Map terraincolor={this.props.terraincolor} fieldcolor={this.props.fieldcolor}/>\n            {night = true &&\n              <Stars\n                radius={200} // Radius of the inner sphere (default=100)\n                depth={50} // Depth of area where stars should fit (default=50)\n                count={5000} // Amount of stars (default=5000)\n                factor={4} // Size factor (default=4)\n                saturation={0} // Saturation 0-1 (default=0)\n                fade // Faded dots (default=false)\n              />\n            }\n              <Farm />\n              <Twitter />\n          </Canvas>\n        )\n    }\n}\n\nexport default Home;\n\n/*<Stars\nradius={100} // Radius of the inner sphere (default=100)\ndepth={50} // Depth of area where stars should fit (default=50)\ncount={5000} // Amount of stars (default=5000)\nfactor={4} // Size factor (default=4)\nsaturation={0} // Saturation 0-1 (default=0)\nfade // Faded dots (default=false)\n\n  \n            <Farm />\n\n            <Rain\n                color='grey'\n                args={[0.3, 10, 0.3]}\n                numberrain = {this.props.rain}\n            />\n            <Snow\n                color='white'\n                args={[1, 1, 1]}\n                numbersnow = {this.props.snow}\n            />\n            <Suspense fallback={null}>\n              <TwitterBird position={[100, 100, 10]} rotation={[-0.5, 0.5, 0]}/>\n            </Suspense>\n<Groupfarm scale={[0.02, 0.02, 0.02]} position={[3, 5, -3]}/>\n            \n\n/>*/"]},"metadata":{},"sourceType":"module"}