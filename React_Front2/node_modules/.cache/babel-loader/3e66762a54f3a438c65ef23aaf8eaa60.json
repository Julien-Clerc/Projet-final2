{"ast":null,"code":"var _jsxFileName = \"/Users/vincent/frontwidgets2/projet/React_Front2/src/context.js\";\n// store/UserProvider.js\nimport React, { createContext, Component } from \"react\"; // on importe createContext qui servira à la création d'un ou plusieurs contextes\n\n/**\n * `createContext` contient 2 propriétés :\n * `Provider` et `Consumer`. Nous les rendons accessibles\n * via la constante `UserContext` et on initialise une\n * propriété par défaut \"name\" qui sera une chaîne vide.\n * On exporte ce contexte afin qu'il soit exploitable par\n * d'autres composants par la suite via le `Consumer`\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThreeContext = /*#__PURE__*/createContext({\n  name: \"\"\n});\n/**\n * la classe UserProvider fera office de... Provider (!)\n * en englobant son enfant direct\n * dans le composant éponyme. De cette façon, ses values\n * seront accessibles de manière globale via le `Consumer`\n */\n\nclass Context extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: \"Putain de Code\" // une valeur de départ\n\n    };\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n\n      /**\n       * la propriété value est très importante ici, elle rend\n       * le contenu du state disponible aux `Consumers` de l'application\n       */\n      _jsxDEV(ThreeContext.Provider, {\n        value: this.state,\n        children: this.props.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n}\n\nexport default Context;","map":{"version":3,"sources":["/Users/vincent/frontwidgets2/projet/React_Front2/src/context.js"],"names":["React","createContext","Component","ThreeContext","name","Context","state","render","props","children"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,QAAgD,OAAhD,C,CAAyD;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,YAAY,gBAAGF,aAAa,CAAC;AACxCG,EAAAA,IAAI,EAAE;AADkC,CAAD,CAAlC;AAIP;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,OAAN,SAAsBH,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC9BI,KAD8B,GACtB;AACNF,MAAAA,IAAI,EAAE,gBADA,CACkB;;AADlB,KADsB;AAAA;;AAK9BG,EAAAA,MAAM,GAAG;AACP;AAAA;;AACE;AACN;AACA;AACA;AACM,cAAC,YAAD,CAAc,QAAd;AAAuB,QAAA,KAAK,EAAE,KAAKD,KAAnC;AAAA,kBACG,KAAKE,KAAL,CAAWC;AADd;AAAA;AAAA;AAAA;AAAA;AALF;AASD;;AAf6B;;AAkBhC,eAAeJ,OAAf","sourcesContent":["// store/UserProvider.js\nimport React, { createContext, Component } from \"react\"; // on importe createContext qui servira à la création d'un ou plusieurs contextes\n\n/**\n * `createContext` contient 2 propriétés :\n * `Provider` et `Consumer`. Nous les rendons accessibles\n * via la constante `UserContext` et on initialise une\n * propriété par défaut \"name\" qui sera une chaîne vide.\n * On exporte ce contexte afin qu'il soit exploitable par\n * d'autres composants par la suite via le `Consumer`\n */\nexport const ThreeContext = createContext({\n  name: \"\",\n});\n\n/**\n * la classe UserProvider fera office de... Provider (!)\n * en englobant son enfant direct\n * dans le composant éponyme. De cette façon, ses values\n * seront accessibles de manière globale via le `Consumer`\n */\nclass Context extends Component {\n  state = {\n    name: \"Putain de Code\", // une valeur de départ\n  };\n\n  render() {\n    return (\n      /**\n       * la propriété value est très importante ici, elle rend\n       * le contenu du state disponible aux `Consumers` de l'application\n       */\n      <ThreeContext.Provider value={this.state}>\n        {this.props.children}\n      </ThreeContext.Provider>\n    );\n  }\n}\n\nexport default Context;"]},"metadata":{},"sourceType":"module"}