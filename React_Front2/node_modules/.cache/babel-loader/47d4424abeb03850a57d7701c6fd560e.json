{"ast":null,"code":"var _jsxFileName = \"/home/julien/Rendu/ETP/Git/C-COD-260-LYN-2-1-ecp-julien.clerc/React_Front2/src/components/three/Text.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useRef, useState, Component } from 'react';\nimport * as THREE from 'three';\nimport { useFrame } from 'react-three-fiber';\nimport JSONfont from \"../../fonts/Cocogoose.json\";\nimport JSONfontQ from \"../../fonts/LGCR.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Town(props, text, position, night) {\n  _s();\n\n  const [hovered, setHover] = useState(false);\n  const mesh = useRef();\n  /*\n  let margin = 0;\n  for (let i=0; i < (props.text).length; i++ ){\n       margin = margin + 40\n  }\n  console.log(\"Margin \"+margin)*/\n\n  let color;\n\n  if (props.night == true) {\n    color = '#ffffff';\n  } else {\n    color = '#37edcc';\n  } // actions to perform in current frame\n\n\n  useFrame(() => {\n    //mesh.current.rotation.x = mesh.current.rotation.y += 0.01;\n    mesh.current.geometry.center();\n  }); // load in font\n\n  const font = new THREE.FontLoader().parse(JSONfont); // configure font mesh\n\n  const textOptions = {\n    font,\n    size: 100,\n    height: hovered ? 0 : 0\n  }; //qqch qui ne se fait pas dans le update !!!!!!!!!!!\n\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: mesh,\n    onPointerOver: e => setHover(true),\n    onPointerOut: e => setHover(false),\n    position: [0, 0, -300],\n    children: [/*#__PURE__*/_jsxDEV(\"textGeometry\", {\n      attach: \"geometry\",\n      args: [props.text, textOptions]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: hovered ? color : color\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Town, \"pZoFiL+AhwNGXYX88bRkaCDUxQ0=\", false, function () {\n  return [useFrame];\n});\n\n_c = Town;\n\nfunction Temperature(props, text, position, night) {\n  _s2();\n\n  const [hovered, setHover] = useState(false);\n  const mesh = useRef();\n  /*\n  let margin = 0;\n  for (let i=0; i < (props.text).length; i++ ){\n       margin = margin + 40\n  }\n  console.log(\"Margin \"+margin)*/\n\n  let color;\n\n  if (props.night == true) {\n    color = '#ffffff';\n  } else {\n    color = '#37edcc';\n  } // actions to perform in current frame\n\n\n  useFrame(() => {\n    //mesh.current.rotation.x = mesh.current.rotation.y += 0.01;\n    mesh.current.geometry.center();\n  }); // load in font\n\n  const font = new THREE.FontLoader().parse(JSONfontQ); // configure font mesh\n\n  const textOptions = {\n    font,\n    size: 100,\n    height: hovered ? 0 : 0\n  }; //qqch qui ne se fait pas dans le update !!!!!!!!!!!\n\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: mesh,\n    onPointerOver: e => setHover(true),\n    onPointerOut: e => setHover(false),\n    position: [0, -150, -300],\n    children: [/*#__PURE__*/_jsxDEV(\"textGeometry\", {\n      attach: \"geometry\",\n      args: [props.text, textOptions]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: hovered ? color : color\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Temperature, \"pZoFiL+AhwNGXYX88bRkaCDUxQ0=\", false, function () {\n  return [useFrame];\n});\n\n_c2 = Temperature;\n\nclass Text extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"group\", {\n      children: [/*#__PURE__*/_jsxDEV(Town, {\n        text: this.props.location,\n        night: this.props.night\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Temperature, {\n        text: this.props.temperature,\n        night: this.props.night\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default Text;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Town\");\n$RefreshReg$(_c2, \"Temperature\");","map":{"version":3,"sources":["/home/julien/Rendu/ETP/Git/C-COD-260-LYN-2-1-ecp-julien.clerc/React_Front2/src/components/three/Text.jsx"],"names":["React","useRef","useState","Component","THREE","useFrame","JSONfont","JSONfontQ","Town","props","text","position","night","hovered","setHover","mesh","color","current","geometry","center","font","FontLoader","parse","textOptions","size","height","e","Temperature","Text","constructor","render","location","temperature"],"mappings":"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","sourcesContent":["import React, { useRef, useState, Component } from 'react'\nimport * as THREE from 'three'\nimport { useFrame } from 'react-three-fiber'\nimport JSONfont from \"../../fonts/Cocogoose.json\";\nimport JSONfontQ from \"../../fonts/LGCR.json\";\n\nfunction Town(props, text, position, night) {\n    const [hovered, setHover] = useState(false);\n    const mesh = useRef();\n    /*\n    let margin = 0;\n    for (let i=0; i < (props.text).length; i++ ){\n\n        margin = margin + 40\n    }\n    console.log(\"Margin \"+margin)*/\n\n    let color\n    if ( props.night == true ){\n        color = '#ffffff'\n    }\n    else{\n        color = '#37edcc'\n    }\n    // actions to perform in current frame\n    useFrame(() => {\n      //mesh.current.rotation.x = mesh.current.rotation.y += 0.01;\n      mesh.current.geometry.center();\n    });\n    \n    // load in font\n    const font = new THREE.FontLoader().parse(JSONfont);\n  \n    // configure font mesh\n    const textOptions = {\n      font,\n      size: 100,\n      height: hovered ? 0 : 0\n    };\n    //qqch qui ne se fait pas dans le update !!!!!!!!!!!\n  \n    return (\n      <mesh\n        ref={mesh}\n        onPointerOver={(e) => setHover(true)}\n        onPointerOut={(e) => setHover(false)}\n        position={[0, 0, -300]}\n      >\n        <textGeometry  attach=\"geometry\" args={[props.text, textOptions]} />\n        <meshBasicMaterial color={hovered ? color : color} />\n      </mesh>\n    );\n}\n\nfunction Temperature(props, text, position, night) {\n  const [hovered, setHover] = useState(false);\n  const mesh = useRef();\n\n  /*\n  let margin = 0;\n  for (let i=0; i < (props.text).length; i++ ){\n\n      margin = margin + 40\n  }\n  console.log(\"Margin \"+margin)*/\n\n  let color\n  if ( props.night == true ){\n      color = '#ffffff'\n  }\n  else{\n      color = '#37edcc'\n  }\n  // actions to perform in current frame\n  useFrame(() => {\n    //mesh.current.rotation.x = mesh.current.rotation.y += 0.01;\n    mesh.current.geometry.center();\n  });\n  \n  // load in font\n  const font = new THREE.FontLoader().parse(JSONfontQ);\n\n  // configure font mesh\n  const textOptions = {\n    font,\n    size: 100,\n    height: hovered ? 0 : 0\n  };\n  //qqch qui ne se fait pas dans le update !!!!!!!!!!!\n\n  return (\n    <mesh\n      ref={mesh}\n      onPointerOver={(e) => setHover(true)}\n      onPointerOut={(e) => setHover(false)}\n      position={[0, -150, -300]}\n    >\n      <textGeometry  attach=\"geometry\" args={[props.text, textOptions]} />\n      <meshBasicMaterial color={hovered ? color : color} />\n    </mesh>\n  );\n}\n\nclass Text extends Component {\n    constructor(props){\n        super(props)\n    }\n    render(){\n        return(\n          <group>\n            <Town text={this.props.location} night={this.props.night}/>\n            <Temperature text={this.props.temperature} night={this.props.night}/>\n          </group>\n        )\n    }\n}\n\nexport default Text;"]},"metadata":{},"sourceType":"module"}