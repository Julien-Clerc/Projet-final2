{"ast":null,"code":"import { MeshStandardMaterial } from 'three';\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor(parameters = {}) {\n    super(parameters);\n\n    _defineProperty(this, \"_tDepth\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_tDiffuse\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_tDiffuseBlur\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_textureMatrix\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_hasBlur\", {\n      value: false\n    });\n\n    _defineProperty(this, \"_mirror\", {\n      value: 0.0\n    });\n\n    _defineProperty(this, \"_mixBlur\", {\n      value: 0.0\n    });\n\n    _defineProperty(this, \"_blurStrength\", {\n      value: 0.5\n    });\n\n    _defineProperty(this, \"_minDepthThreshold\", {\n      value: 0.9\n    });\n\n    _defineProperty(this, \"_maxDepthThreshold\", {\n      value: 1\n    });\n\n    _defineProperty(this, \"_depthScale\", {\n      value: 0\n    });\n\n    this.setValues(parameters);\n  }\n\n  onBeforeCompile(shader) {\n    shader.uniforms.hasBlur = this._hasBlur;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.tDiffuseBlur = this._tDiffuseBlur;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.vertexShader = \"\\n        uniform mat4 textureMatrix;\\n        varying vec4 my_vUv;     \\n      \" + shader.vertexShader;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', \"#include <project_vertex>\\n        my_vUv = textureMatrix * vec4( position, 1.0 );\\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\");\n    shader.fragmentShader = \"\\n        uniform sampler2D tDiffuse;\\n        uniform sampler2D tDiffuseBlur;\\n        uniform sampler2D tDepth;\\n        uniform float cameraNear;\\n\\t\\t\\t  uniform float cameraFar;\\n        uniform bool hasBlur;\\n        uniform float mixBlur;\\n        uniform float mirror;\\n        uniform float mixStrength;\\n        uniform float minDepthThreshold;\\n        uniform float maxDepthThreshold;\\n        uniform float depthScale;\\n        varying vec4 my_vUv;        \\n        \" + shader.fragmentShader;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', \"#include <emissivemap_fragment>\\n      \\n      vec4 depth = texture2DProj(tDepth, my_vUv );\\n      vec4 base = texture2DProj(tDiffuse, my_vUv);\\n      vec4 blur = texture2DProj(tDiffuseBlur, my_vUv);\\n\\n      float depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\\n      depthFactor *= depthScale;\\n      depthFactor = min(1.0, depthFactor);\\n\\n      float reflectorRoughnessFactor = roughness;\\n      #ifdef USE_ROUGHNESSMAP\\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\\n      #endif\\n\\n      vec4 merge = base;\\n      if (hasBlur) {\\n        float blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);\\n        merge = mix(merge, blur, blurFactor);\\n      }\\n      merge += mix(merge, base, depthFactor);\\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + merge.rgb * mixStrength);           \\n      diffuseColor = sRGBToLinear(diffuseColor);\");\n  }\n\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n\n  get tDepth() {\n    return this._tDepth.value;\n  }\n\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n\n  get tDiffuseBlur() {\n    return this._tDiffuseBlur.value;\n  }\n\n  set tDiffuseBlur(v) {\n    this._tDiffuseBlur.value = v;\n  }\n\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n\n  get hasBlur() {\n    return this._hasBlur.value;\n  }\n\n  set hasBlur(v) {\n    this._hasBlur.value = v;\n  }\n\n  get mirror() {\n    return this._mirror.value;\n  }\n\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n\n  get depthScale() {\n    return this._depthScale.value;\n  }\n\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n\n}\n\nexport { MeshReflectorMaterial };","map":{"version":3,"sources":["/home/julien/Rendu/ETP/Git/C-COD-260-LYN-2-1-ecp-julien.clerc/React_Front2/node_modules/@react-three/drei/materials/MeshReflectorMaterial.js"],"names":["MeshStandardMaterial","_defineProperty","MeshReflectorMaterial","constructor","parameters","value","setValues","onBeforeCompile","shader","uniforms","hasBlur","_hasBlur","tDiffuse","_tDiffuse","tDepth","_tDepth","tDiffuseBlur","_tDiffuseBlur","textureMatrix","_textureMatrix","mirror","_mirror","mixBlur","_mixBlur","mixStrength","_blurStrength","minDepthThreshold","_minDepthThreshold","maxDepthThreshold","_maxDepthThreshold","depthScale","_depthScale","vertexShader","replace","fragmentShader","v"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,OAArC;AACA,OAAOC,eAAP,MAA4B,2CAA5B;;AAEA,MAAMC,qBAAN,SAAoCF,oBAApC,CAAyD;AACvDG,EAAAA,WAAW,CAACC,UAAU,GAAG,EAAd,EAAkB;AAC3B,UAAMA,UAAN;;AAEAH,IAAAA,eAAe,CAAC,IAAD,EAAO,SAAP,EAAkB;AAC/BI,MAAAA,KAAK,EAAE;AADwB,KAAlB,CAAf;;AAIAJ,IAAAA,eAAe,CAAC,IAAD,EAAO,WAAP,EAAoB;AACjCI,MAAAA,KAAK,EAAE;AAD0B,KAApB,CAAf;;AAIAJ,IAAAA,eAAe,CAAC,IAAD,EAAO,eAAP,EAAwB;AACrCI,MAAAA,KAAK,EAAE;AAD8B,KAAxB,CAAf;;AAIAJ,IAAAA,eAAe,CAAC,IAAD,EAAO,gBAAP,EAAyB;AACtCI,MAAAA,KAAK,EAAE;AAD+B,KAAzB,CAAf;;AAIAJ,IAAAA,eAAe,CAAC,IAAD,EAAO,UAAP,EAAmB;AAChCI,MAAAA,KAAK,EAAE;AADyB,KAAnB,CAAf;;AAIAJ,IAAAA,eAAe,CAAC,IAAD,EAAO,SAAP,EAAkB;AAC/BI,MAAAA,KAAK,EAAE;AADwB,KAAlB,CAAf;;AAIAJ,IAAAA,eAAe,CAAC,IAAD,EAAO,UAAP,EAAmB;AAChCI,MAAAA,KAAK,EAAE;AADyB,KAAnB,CAAf;;AAIAJ,IAAAA,eAAe,CAAC,IAAD,EAAO,eAAP,EAAwB;AACrCI,MAAAA,KAAK,EAAE;AAD8B,KAAxB,CAAf;;AAIAJ,IAAAA,eAAe,CAAC,IAAD,EAAO,oBAAP,EAA6B;AAC1CI,MAAAA,KAAK,EAAE;AADmC,KAA7B,CAAf;;AAIAJ,IAAAA,eAAe,CAAC,IAAD,EAAO,oBAAP,EAA6B;AAC1CI,MAAAA,KAAK,EAAE;AADmC,KAA7B,CAAf;;AAIAJ,IAAAA,eAAe,CAAC,IAAD,EAAO,aAAP,EAAsB;AACnCI,MAAAA,KAAK,EAAE;AAD4B,KAAtB,CAAf;;AAIA,SAAKC,SAAL,CAAeF,UAAf;AACD;;AAEDG,EAAAA,eAAe,CAACC,MAAD,EAAS;AACtBA,IAAAA,MAAM,CAACC,QAAP,CAAgBC,OAAhB,GAA0B,KAAKC,QAA/B;AACAH,IAAAA,MAAM,CAACC,QAAP,CAAgBG,QAAhB,GAA2B,KAAKC,SAAhC;AACAL,IAAAA,MAAM,CAACC,QAAP,CAAgBK,MAAhB,GAAyB,KAAKC,OAA9B;AACAP,IAAAA,MAAM,CAACC,QAAP,CAAgBO,YAAhB,GAA+B,KAAKC,aAApC;AACAT,IAAAA,MAAM,CAACC,QAAP,CAAgBS,aAAhB,GAAgC,KAAKC,cAArC;AACAX,IAAAA,MAAM,CAACC,QAAP,CAAgBW,MAAhB,GAAyB,KAAKC,OAA9B;AACAb,IAAAA,MAAM,CAACC,QAAP,CAAgBa,OAAhB,GAA0B,KAAKC,QAA/B;AACAf,IAAAA,MAAM,CAACC,QAAP,CAAgBe,WAAhB,GAA8B,KAAKC,aAAnC;AACAjB,IAAAA,MAAM,CAACC,QAAP,CAAgBiB,iBAAhB,GAAoC,KAAKC,kBAAzC;AACAnB,IAAAA,MAAM,CAACC,QAAP,CAAgBmB,iBAAhB,GAAoC,KAAKC,kBAAzC;AACArB,IAAAA,MAAM,CAACC,QAAP,CAAgBqB,UAAhB,GAA6B,KAAKC,WAAlC;AACAvB,IAAAA,MAAM,CAACwB,YAAP,GAAsB,qFAAqFxB,MAAM,CAACwB,YAAlH;AACAxB,IAAAA,MAAM,CAACwB,YAAP,GAAsBxB,MAAM,CAACwB,YAAP,CAAoBC,OAApB,CAA4B,2BAA5B,EAAyD,uKAAzD,CAAtB;AACAzB,IAAAA,MAAM,CAAC0B,cAAP,GAAwB,oeAAoe1B,MAAM,CAAC0B,cAAngB;AACA1B,IAAAA,MAAM,CAAC0B,cAAP,GAAwB1B,MAAM,CAAC0B,cAAP,CAAsBD,OAAtB,CAA8B,iCAA9B,EAAiE,4+BAAjE,CAAxB;AACD;;AAEW,MAARrB,QAAQ,GAAG;AACb,WAAO,KAAKC,SAAL,CAAeR,KAAtB;AACD;;AAEW,MAARO,QAAQ,CAACuB,CAAD,EAAI;AACd,SAAKtB,SAAL,CAAeR,KAAf,GAAuB8B,CAAvB;AACD;;AAES,MAANrB,MAAM,GAAG;AACX,WAAO,KAAKC,OAAL,CAAaV,KAApB;AACD;;AAES,MAANS,MAAM,CAACqB,CAAD,EAAI;AACZ,SAAKpB,OAAL,CAAaV,KAAb,GAAqB8B,CAArB;AACD;;AAEe,MAAZnB,YAAY,GAAG;AACjB,WAAO,KAAKC,aAAL,CAAmBZ,KAA1B;AACD;;AAEe,MAAZW,YAAY,CAACmB,CAAD,EAAI;AAClB,SAAKlB,aAAL,CAAmBZ,KAAnB,GAA2B8B,CAA3B;AACD;;AAEgB,MAAbjB,aAAa,GAAG;AAClB,WAAO,KAAKC,cAAL,CAAoBd,KAA3B;AACD;;AAEgB,MAAba,aAAa,CAACiB,CAAD,EAAI;AACnB,SAAKhB,cAAL,CAAoBd,KAApB,GAA4B8B,CAA5B;AACD;;AAEU,MAAPzB,OAAO,GAAG;AACZ,WAAO,KAAKC,QAAL,CAAcN,KAArB;AACD;;AAEU,MAAPK,OAAO,CAACyB,CAAD,EAAI;AACb,SAAKxB,QAAL,CAAcN,KAAd,GAAsB8B,CAAtB;AACD;;AAES,MAANf,MAAM,GAAG;AACX,WAAO,KAAKC,OAAL,CAAahB,KAApB;AACD;;AAES,MAANe,MAAM,CAACe,CAAD,EAAI;AACZ,SAAKd,OAAL,CAAahB,KAAb,GAAqB8B,CAArB;AACD;;AAEU,MAAPb,OAAO,GAAG;AACZ,WAAO,KAAKC,QAAL,CAAclB,KAArB;AACD;;AAEU,MAAPiB,OAAO,CAACa,CAAD,EAAI;AACb,SAAKZ,QAAL,CAAclB,KAAd,GAAsB8B,CAAtB;AACD;;AAEc,MAAXX,WAAW,GAAG;AAChB,WAAO,KAAKC,aAAL,CAAmBpB,KAA1B;AACD;;AAEc,MAAXmB,WAAW,CAACW,CAAD,EAAI;AACjB,SAAKV,aAAL,CAAmBpB,KAAnB,GAA2B8B,CAA3B;AACD;;AAEoB,MAAjBT,iBAAiB,GAAG;AACtB,WAAO,KAAKC,kBAAL,CAAwBtB,KAA/B;AACD;;AAEoB,MAAjBqB,iBAAiB,CAACS,CAAD,EAAI;AACvB,SAAKR,kBAAL,CAAwBtB,KAAxB,GAAgC8B,CAAhC;AACD;;AAEoB,MAAjBP,iBAAiB,GAAG;AACtB,WAAO,KAAKC,kBAAL,CAAwBxB,KAA/B;AACD;;AAEoB,MAAjBuB,iBAAiB,CAACO,CAAD,EAAI;AACvB,SAAKN,kBAAL,CAAwBxB,KAAxB,GAAgC8B,CAAhC;AACD;;AAEa,MAAVL,UAAU,GAAG;AACf,WAAO,KAAKC,WAAL,CAAiB1B,KAAxB;AACD;;AAEa,MAAVyB,UAAU,CAACK,CAAD,EAAI;AAChB,SAAKJ,WAAL,CAAiB1B,KAAjB,GAAyB8B,CAAzB;AACD;;AA3JsD;;AA+JzD,SAASjC,qBAAT","sourcesContent":["import { MeshStandardMaterial } from 'three';\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor(parameters = {}) {\n    super(parameters);\n\n    _defineProperty(this, \"_tDepth\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_tDiffuse\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_tDiffuseBlur\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_textureMatrix\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_hasBlur\", {\n      value: false\n    });\n\n    _defineProperty(this, \"_mirror\", {\n      value: 0.0\n    });\n\n    _defineProperty(this, \"_mixBlur\", {\n      value: 0.0\n    });\n\n    _defineProperty(this, \"_blurStrength\", {\n      value: 0.5\n    });\n\n    _defineProperty(this, \"_minDepthThreshold\", {\n      value: 0.9\n    });\n\n    _defineProperty(this, \"_maxDepthThreshold\", {\n      value: 1\n    });\n\n    _defineProperty(this, \"_depthScale\", {\n      value: 0\n    });\n\n    this.setValues(parameters);\n  }\n\n  onBeforeCompile(shader) {\n    shader.uniforms.hasBlur = this._hasBlur;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.tDiffuseBlur = this._tDiffuseBlur;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.vertexShader = \"\\n        uniform mat4 textureMatrix;\\n        varying vec4 my_vUv;     \\n      \" + shader.vertexShader;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', \"#include <project_vertex>\\n        my_vUv = textureMatrix * vec4( position, 1.0 );\\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\");\n    shader.fragmentShader = \"\\n        uniform sampler2D tDiffuse;\\n        uniform sampler2D tDiffuseBlur;\\n        uniform sampler2D tDepth;\\n        uniform float cameraNear;\\n\\t\\t\\t  uniform float cameraFar;\\n        uniform bool hasBlur;\\n        uniform float mixBlur;\\n        uniform float mirror;\\n        uniform float mixStrength;\\n        uniform float minDepthThreshold;\\n        uniform float maxDepthThreshold;\\n        uniform float depthScale;\\n        varying vec4 my_vUv;        \\n        \" + shader.fragmentShader;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', \"#include <emissivemap_fragment>\\n      \\n      vec4 depth = texture2DProj(tDepth, my_vUv );\\n      vec4 base = texture2DProj(tDiffuse, my_vUv);\\n      vec4 blur = texture2DProj(tDiffuseBlur, my_vUv);\\n\\n      float depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\\n      depthFactor *= depthScale;\\n      depthFactor = min(1.0, depthFactor);\\n\\n      float reflectorRoughnessFactor = roughness;\\n      #ifdef USE_ROUGHNESSMAP\\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\\n      #endif\\n\\n      vec4 merge = base;\\n      if (hasBlur) {\\n        float blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);\\n        merge = mix(merge, blur, blurFactor);\\n      }\\n      merge += mix(merge, base, depthFactor);\\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + merge.rgb * mixStrength);           \\n      diffuseColor = sRGBToLinear(diffuseColor);\");\n  }\n\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n\n  get tDepth() {\n    return this._tDepth.value;\n  }\n\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n\n  get tDiffuseBlur() {\n    return this._tDiffuseBlur.value;\n  }\n\n  set tDiffuseBlur(v) {\n    this._tDiffuseBlur.value = v;\n  }\n\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n\n  get hasBlur() {\n    return this._hasBlur.value;\n  }\n\n  set hasBlur(v) {\n    this._hasBlur.value = v;\n  }\n\n  get mirror() {\n    return this._mirror.value;\n  }\n\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n\n  get depthScale() {\n    return this._depthScale.value;\n  }\n\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n\n}\n\nexport { MeshReflectorMaterial };\n"]},"metadata":{},"sourceType":"module"}