{"ast":null,"code":"var _jsxFileName = \"/home/julien/Rendu/ETP/React_Front/src/Components/three/Map.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useRef, useState, Component } from 'react';\nimport { useFrame } from 'react-three-fiber';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Terrain(props, terraincolor) {\n  _s();\n\n  // This reference will give us direct access to the mesh\n  const meshterrain = useRef();\n  console.log(props.terraincolor); // Set up state for the hovered and active state\n\n  const [hovered, setHover] = useState(false);\n  const [active, setActive] = useState(false); // Rotate mesh every frame, this is outside of React without overhead\n\n  useFrame(() => {//mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n    ref: meshterrain,\n    scale: active ? [1, 1, 1] : [1, 1, 1],\n    onClick: e => setActive(!active),\n    onPointerOver: e => setHover(true),\n    onPointerOut: e => setHover(false),\n    children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n      args: [105, 3, 105]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: props.terraincolor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Terrain, \"2ZgwgPFh157GvrIAoFz26ZYVz40=\", false, function () {\n  return [useFrame];\n});\n\n_c = Terrain;\n\nfunction CornField(props, fieldcolor) {\n  _s2();\n\n  // This reference will give us direct access to the mesh\n  const meshfield = useRef(); // Set up state for the hovered and active state\n\n  const [hovered, setHover] = useState(false);\n  const [active, setActive] = useState(false); // Rotate mesh every frame, this is outside of React without overhead\n\n  useFrame(() => {//mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n    ref: meshfield,\n    scale: active ? [1, 1, 1] : [1, 1, 1],\n    onClick: e => setActive(!active),\n    onPointerOver: e => setHover(true),\n    onPointerOut: e => setHover(false),\n    children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n      args: [20, 2, 40]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: props.fieldcolor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(CornField, \"h8++n16Znuu8/bLl2WYJ/C7jvQ0=\", false, function () {\n  return [useFrame];\n});\n\n_c2 = CornField;\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"group\", {\n      children: [/*#__PURE__*/_jsxDEV(Terrain, {\n        position: [0, 0, 0],\n        terraincolor: this.props.terraincolor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CornField, {\n        position: [0, 2, 20],\n        fieldcolor: this.props.fieldcolor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Map;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Terrain\");\n$RefreshReg$(_c2, \"CornField\");","map":{"version":3,"sources":["/home/julien/Rendu/ETP/React_Front/src/Components/three/Map.jsx"],"names":["React","useRef","useState","Component","useFrame","Terrain","props","terraincolor","meshterrain","console","log","hovered","setHover","active","setActive","e","CornField","fieldcolor","meshfield","Map","constructor","render"],"mappings":"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","sourcesContent":["import React, { useRef, useState, Component } from 'react'\nimport { useFrame } from 'react-three-fiber'\n\nfunction Terrain(props, terraincolor) {\n    // This reference will give us direct access to the mesh\n    const meshterrain = useRef()\n    console.log(props.terraincolor)\n    // Set up state for the hovered and active state\n    const [hovered, setHover] = useState(false)\n    const [active, setActive] = useState(false)\n    // Rotate mesh every frame, this is outside of React without overhead\n    useFrame(() => {\n      //mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n    })\n    return (\n      <mesh\n        {...props}\n        ref={meshterrain}\n        scale={active ? [1, 1, 1] : [1, 1, 1]}\n        onClick={(e) => setActive(!active)}\n        onPointerOver={(e) => setHover(true)}\n        onPointerOut={(e) => setHover(false)}>\n        <boxBufferGeometry args={[105, 3, 105]} />\n        <meshStandardMaterial color={props.terraincolor} />\n      </mesh>\n    )\n}\n\nfunction CornField(props, fieldcolor) {\n  // This reference will give us direct access to the mesh\n  const meshfield = useRef()\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => {\n    //mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n  })\n  return (\n    <mesh\n      {...props}\n      ref={meshfield}\n      scale={active ? [1, 1, 1] : [1, 1, 1]}\n      onClick={(e) => setActive(!active)}\n      onPointerOver={(e) => setHover(true)}\n      onPointerOut={(e) => setHover(false)}>\n      <boxBufferGeometry args={[20, 2,40]} />\n      <meshStandardMaterial color={props.fieldcolor} />\n    </mesh>\n  )\n}\n\nclass Map extends Component {\n    constructor(props){\n        super(props)\n    }\n    render(){\n        return(\n            <group>\n                <Terrain \n                    position={[0, 0, 0]} \n                    terraincolor = {this.props.terraincolor}\n                />\n                <CornField position={[0, 2, 20]} fieldcolor={this.props.fieldcolor}/>\n            </group>\n        )\n    }\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}