{"ast":null,"code":"var _jsxFileName = \"/Users/vincent/frontwidgets2/projet/React_Front2/src/components/Home.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useRef, useState, Component } from 'react';\nimport * as THREE from 'three';\nimport { Canvas, useFrame } from 'react-three-fiber';\nimport { softShadows, Sky, Stars, OrbitControls, PerspectiveCamera } from \"@react-three/drei\";\nimport { useSpring, a } from 'react-spring/three';\nimport JSONfont from \"../fonts/Cocogoose.json\";\nimport axios from 'axios'; //JSX\n\nimport Farm from \"./three/Farm.jsx\";\nimport Twitter from \"./three/TwitterBird.jsx\";\nimport Trees from \"./three/Feuillage.jsx\";\nimport Text from \"./three/Text.jsx\";\nimport Map from \"./three/Map.jsx\";\nimport Disc from \"./three/Disc.jsx\";\nimport AmericanFlag from \"./three/AmericanFlag.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar night = false; //const hourtest = 12\n\nfunction azimuth(daystart, daylength, weather) {\n  //Get current geographic hour\n  var d = new Date(); //get current hour\n\n  var currenthour = d.getHours();\n  console.log(\"WEATHER : \" + weather); //get by API\n\n  daystart = Number(daystart);\n  daylength = Number(daylength); //Ex : Valeur de départ Azimuth: 0.1171\n  //Ex : Valeur de fin Azimuth: 0.3882\n  //Ex : longueur totale de la translation d'azimuth : 0.3882 - 0.1171\n\n  let total = 0.5; //déclaration de la valeur courante\n\n  let azimuthNow;\n  azimuthNow = total * (currenthour - daystart) / daylength; //sets night to true if night it is\n\n  if (currenthour > daylength + daystart - 1 || currenthour < daystart) {\n    night = true;\n  } else {\n    night = false;\n  }\n\n  return azimuthNow;\n}\n\nfunction inclination(daystart, daylength) {\n  //Get current geographic hour\n  var d = new Date(); //get current hour\n\n  var currenthour = d.getHours();\n  daystart = Number(daystart);\n  daylength = Number(daylength); //get by API\n\n  let noon = daylength / 2 + daystart; //midi = la moitié de la journée de soleil + l'heure de démarrage\n  //soit pour un jour d'ensoleillement de 11h = 11/2 + 6 = 11.5\n\n  console.log(\"NOON \" + noon); //currenthour = hourtest\n  //Ex : Valeur de départ Inclination: 0.1171\n  //Ex : Valeur de fin Inclination: 0.3882\n  //Ex : longueur totale de la translation d'azimuth : 0.3882 - 0.1171\n\n  let total = 0.5 - 0.388; //déclaration de la valeur courante\n\n  let inclinationNow;\n\n  if (currenthour < noon) {\n    inclinationNow = (currenthour - daystart) * total / (daylength / 2);\n  } else {\n    let diffHour = noon - (currenthour - noon);\n    inclinationNow = (diffHour - daystart) * total / (daylength / 2);\n  }\n\n  return inclinationNow + 0.5;\n  /*\n  azimuth\n  0.1171\n  0.3882\n   inclination\n  0.5\n  0.388\n  0.5\n   exposure\n  0.1171   */\n} // soft Shadows\n\n\nsoftShadows(); //globals\n\nvar forestNumber = [];\nconst numbertrees = 300;\nconst numberclouds = 100;\n\nconst Rain = ({\n  position,\n  color,\n  args,\n  numberrain\n}) => {\n  _s();\n\n  var rainpositions = [];\n\n  for (let i = 0; i < numberrain; i++) {\n    let rainNewPosX = getRandomInt(45);\n    let rainNewPosZ = getRandomInt(45);\n    let object = {\n      x: rainNewPosX,\n      y: 40 + getRandomInt(10),\n      z: rainNewPosZ\n    };\n    rainpositions.push(object);\n  } //ref to target the mesh\n\n\n  const grouprain = useRef(); //useFrame allows us to re-render/update on each frame\n\n  useFrame(() => {\n    if (grouprain.current == null) {} else {\n      if (grouprain.current.position.y >= -40) {\n        grouprain.current.position.y = grouprain.current.position.y -= 1.2;\n      } else {\n        grouprain.current.position.y = 5;\n      }\n    }\n  }); //Basic expand state\n\n  const [expand, setExpand] = useState(false); // React spring expand animation\n\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1]\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: grouprain,\n    children: rainpositions.map((d, index) => /*#__PURE__*/_jsxDEV(a.mesh, {\n      position: [d.x, d.y, d.z],\n      onClick: () => setExpand(!expand),\n      scale: props.scale,\n      castShadow: true,\n      children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n        attach: \"geometry\",\n        args: args\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Rain, \"Wn/qMzlGESBwGJNXW4NfiykU2s8=\", false, function () {\n  return [useFrame, useSpring];\n});\n\n_c = Rain;\n\nconst Snow = ({\n  position,\n  color,\n  args,\n  numbersnow\n}) => {\n  _s2();\n\n  var snowpositions = [];\n\n  for (let i = 0; i < numbersnow; i++) {\n    let snowNewPosX = getRandomInt(45);\n    let snowNewPosZ = getRandomInt(45);\n    let object = {\n      x: snowNewPosX,\n      y: 40 + getRandomInt(10),\n      z: snowNewPosZ\n    };\n    snowpositions.push(object);\n  } //ref to target the mesh\n\n\n  const groupsnow = useRef(); //useFrame allows us to re-render/update on each frame\n\n  useFrame(() => {\n    if (groupsnow.current == null) {//console.log(\"groupsnow null\")\n    } else {\n      if (groupsnow.current.position.y >= -40) {\n        groupsnow.current.position.y = groupsnow.current.position.y -= 1.2;\n      } else {\n        groupsnow.current.position.y = 5;\n      }\n    }\n  }); //Basic expand state\n\n  const [expand, setExpand] = useState(false); // React spring expand animation\n\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1]\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: groupsnow,\n    children: snowpositions.map((d, index) => /*#__PURE__*/_jsxDEV(a.mesh, {\n      position: [d.x, d.y, d.z],\n      onClick: () => setExpand(!expand),\n      scale: props.scale,\n      castShadow: true,\n      children: [/*#__PURE__*/_jsxDEV(\"sphereBufferGeometry\", {\n        attach: \"geometry\",\n        args: args\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Snow, \"zjDNZtiztTWhXaAO2miUzky1LUc=\", false, function () {\n  return [useFrame, useSpring];\n});\n\n_c2 = Snow;\n\nfunction Clouds(props, color, number) {\n  _s3();\n\n  var cloudpositions = [];\n\n  for (let i = 0; i < props.number; i++) {\n    let cloudNewPosX = getRandomInt(45);\n    let cloudNewPosY = 50 + getRandomInt(15);\n    let cloudNewPosZ = getRandomInt(45);\n    let object = {\n      x: cloudNewPosX,\n      y: cloudNewPosY,\n      z: cloudNewPosZ\n    };\n    cloudpositions.push(object);\n  }\n\n  const groupclouds = useRef(); //Basic expand state\n\n  const [expand, setExpand] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: groupclouds,\n    children: cloudpositions.map((d, index) => /*#__PURE__*/_jsxDEV(a.mesh, {\n      position: [d.x, d.y, d.z],\n      onClick: () => setExpand(!expand),\n      scale: [20, 8, 20],\n      castShadow: true,\n      receiveshadow: true,\n      children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n        attach: \"geometry\",\n        args: d.args\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(a.meshPhysicalMaterial, {\n        attach: \"material\",\n        color: props.color,\n        roughness: 0,\n        opacity: 0.8,\n        transparent: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 5\n  }, this);\n}\n/*\nfunction Dolly() {\n  // This one makes the camera move in and out\n  useFrame(({ camera }) => {\n    camera.position.z = 200\n  })\n  return null\n}*/\n\n\n_s3(Clouds, \"ANRg2MJNTwX2sqhH3NThDy2bUsU=\");\n\n_c3 = Clouds;\n\nfunction Lights() {\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: [/*#__PURE__*/_jsxDEV(\"pointLight\", {\n      intensity: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.3\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"spotLight\", {\n      castShadow: true,\n      intensity: 0.1,\n      angle: Math.PI / 7,\n      position: [150, 150, 250],\n      penumbra: 1,\n      \"shadow-mapSize-width\": 2048,\n      \"shadow-mapSize-height\": 2048\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 5\n  }, this);\n}\n\n_c4 = Lights;\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max)) - Math.floor(Math.random() * Math.floor(max));\n}\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rise: '8',\n      set: null,\n      daylight: '10',\n      numberclouds: null,\n      temperature: '0',\n      town: 'Undefined',\n      weather: {}\n    };\n  }\n\n  async componentDidMount() {\n    var data = JSON.stringify({\n      \"city\": this.props.town\n    }); // https://api.openweathermap.org/data/2.5/weather?q=toronto&appid=8d23c2c814d8bc6ea19d77c49f3cc746\n\n    var config = {\n      method: 'post',\n      url: 'http://localhost:8087/weather',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: data\n    };\n    let meteodata;\n    await axios(config).then(function (response) {\n      const meteo = response.data;\n      meteodata = meteo;\n    }).catch(function (error) {\n      console.log(error);\n    });\n    console.log(\"METEODATA : \" + meteodata);\n    this.setState({\n      rise: JSON.stringify(meteodata.sun.rise),\n      set: JSON.stringify(meteodata.sun.set),\n      daylight: JSON.stringify(meteodata.sun.daylight),\n      numberclouds: Number(JSON.stringify(meteodata.weather.clouds.all)),\n      temperature: String((Number(JSON.stringify(meteodata.weather.main.temp)) - 273.15).toFixed(2)),\n      weather: JSON.stringify(meteodata.weather.weather[0]),\n      town: this.props.town\n    });\n  }\n\n  homeUppercase(val = 'Undefined') {\n    val = val.toUpperCase();\n    return val;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixedCanvas\",\n      children: /*#__PURE__*/_jsxDEV(Canvas, {\n        style: {\n          height: \"100vh\",\n          width: \"100vw\",\n          backgroundColor: \"#abfff5\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Sky, {\n          distance: 45000 // Camera distance (default=450000)\n          ,\n          inclination: inclination(this.state.rise, this.state.daylight) // Sun elevation angle from 0 to 1 (default=0)\n          ,\n          azimuth: azimuth(this.state.rise, this.state.daylight, this.state.weather) // Sun rotation around the Y axis from 0 to 1 (default=0.25)\n          ,\n          turbidity: 20,\n          rayleigh: 4,\n          exposure: 1000\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Lights, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n          minDistance: [180],\n          maxDistance: [300]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Trees, {\n          treecolor: this.props.treecolor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Clouds, {\n          color: this.props.cloudscolor,\n          number: this.state.numberclouds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          location: this.homeUppercase(this.state.town),\n          night: night,\n          temperature: this.state.temperature + \" °\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Snow, {\n          color: \"white\",\n          args: [1, 1, 1],\n          numbersnow: this.props.snow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Rain, {\n          color: \"grey\",\n          args: [0.3, 10, 0.3],\n          numberrain: this.props.rain\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Map, {\n          terraincolor: this.props.terraincolor,\n          fieldcolor: this.props.fieldcolor,\n          roadcolor: this.props.roadcolor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 13\n        }, this), night = true && /*#__PURE__*/_jsxDEV(Stars, {\n          radius: 200 // Radius of the inner sphere (default=100)\n          ,\n          depth: 50 // Depth of area where stars should fit (default=50)\n          ,\n          count: 5000 // Amount of stars (default=5000)\n          ,\n          factor: 4 // Size factor (default=4)\n          ,\n          saturation: 0 // Saturation 0-1 (default=0)\n          ,\n          fade: true // Faded dots (default=false)\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Farm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Twitter, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Disc, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(AmericanFlag, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default Home;\n/*<Stars\nradius={100} // Radius of the inner sphere (default=100)\ndepth={50} // Depth of area where stars should fit (default=50)\ncount={5000} // Amount of stars (default=5000)\nfactor={4} // Size factor (default=4)\nsaturation={0} // Saturation 0-1 (default=0)\nfade // Faded dots (default=false)\n\n  \n            <Farm />\n\n            <Rain\n                color='grey'\n                args={[0.3, 10, 0.3]}\n                numberrain = {this.props.rain}\n            />\n            <Snow\n                color='white'\n                args={[1, 1, 1]}\n                numbersnow = {this.props.snow}\n            />\n            <Suspense fallback={null}>\n              <TwitterBird position={[100, 100, 10]} rotation={[-0.5, 0.5, 0]}/>\n            </Suspense>\n<Groupfarm scale={[0.02, 0.02, 0.02]} position={[3, 5, -3]}/>\n            \n\n/>*/\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Rain\");\n$RefreshReg$(_c2, \"Snow\");\n$RefreshReg$(_c3, \"Clouds\");\n$RefreshReg$(_c4, \"Lights\");","map":{"version":3,"sources":["/Users/vincent/frontwidgets2/projet/React_Front2/src/components/Home.jsx"],"names":["React","useRef","useState","Component","THREE","Canvas","useFrame","softShadows","Sky","Stars","OrbitControls","PerspectiveCamera","useSpring","a","JSONfont","axios","Farm","Twitter","Trees","Text","Map","Disc","AmericanFlag","night","azimuth","daystart","daylength","weather","d","Date","currenthour","getHours","console","log","Number","total","azimuthNow","inclination","noon","inclinationNow","diffHour","forestNumber","numbertrees","numberclouds","Rain","position","color","args","numberrain","rainpositions","i","rainNewPosX","getRandomInt","rainNewPosZ","object","x","y","z","push","grouprain","current","expand","setExpand","props","scale","map","index","Snow","numbersnow","snowpositions","snowNewPosX","snowNewPosZ","groupsnow","Clouds","number","cloudpositions","cloudNewPosX","cloudNewPosY","cloudNewPosZ","groupclouds","Lights","Math","PI","max","floor","random","Home","constructor","state","rise","set","daylight","temperature","town","componentDidMount","data","JSON","stringify","config","method","url","headers","meteodata","then","response","meteo","catch","error","setState","sun","clouds","all","String","main","temp","toFixed","homeUppercase","val","toUpperCase","render","height","width","backgroundColor","treecolor","cloudscolor","snow","rain","terraincolor","fieldcolor","roadcolor"],"mappings":"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","sourcesContent":["import React, { useRef, useState, Component } from 'react'\nimport * as THREE from 'three'\nimport { Canvas, useFrame } from 'react-three-fiber'\nimport { softShadows, Sky, Stars, OrbitControls, PerspectiveCamera } from \"@react-three/drei\"\nimport { useSpring, a } from 'react-spring/three'\nimport JSONfont from \"../fonts/Cocogoose.json\"\nimport axios from 'axios'\n\n\n//JSX\nimport Farm from \"./three/Farm.jsx\"\nimport Twitter from \"./three/TwitterBird.jsx\"\nimport Trees from \"./three/Feuillage.jsx\"\nimport Text from \"./three/Text.jsx\"\nimport Map from \"./three/Map.jsx\"\nimport Disc from \"./three/Disc.jsx\"\nimport AmericanFlag from \"./three/AmericanFlag.jsx\"\n\nvar night = false\n//const hourtest = 12\n\nfunction azimuth(daystart, daylength, weather){\n  //Get current geographic hour\n  var d = new Date();\n  //get current hour\n  var currenthour = d.getHours();\n\n  console.log(\"WEATHER : \"+weather)\n  //get by API\n  daystart = Number(daystart)\n  daylength = Number(daylength)\n\n  //Ex : Valeur de départ Azimuth: 0.1171\n  //Ex : Valeur de fin Azimuth: 0.3882\n  //Ex : longueur totale de la translation d'azimuth : 0.3882 - 0.1171\n  let total = 0.5\n\n  //déclaration de la valeur courante\n  let azimuthNow\n\n  azimuthNow = (total * (currenthour-daystart))/daylength\n\n  //sets night to true if night it is\n  if ( (currenthour > (daylength + daystart)-1)||(currenthour < daystart) ){\n    night = true\n  }\n  else\n  {\n    night = false\n  }\n\n  return azimuthNow\n}\n\nfunction inclination(daystart, daylength){\n  //Get current geographic hour\n  var d = new Date();\n  //get current hour\n  var currenthour = d.getHours();\n  daystart = Number(daystart)\n  daylength = Number(daylength)\n\n  //get by API\n  let noon = daylength/2 + daystart //midi = la moitié de la journée de soleil + l'heure de démarrage\n  //soit pour un jour d'ensoleillement de 11h = 11/2 + 6 = 11.5\n  console.log(\"NOON \"+noon)\n\n  //currenthour = hourtest\n\n  //Ex : Valeur de départ Inclination: 0.1171\n  //Ex : Valeur de fin Inclination: 0.3882\n  //Ex : longueur totale de la translation d'azimuth : 0.3882 - 0.1171\n  let total = 0.5 - 0.388\n\n  //déclaration de la valeur courante\n  let inclinationNow\n\n  \n\n  if (currenthour < noon) {\n    inclinationNow = (currenthour - daystart) * total / (daylength/2);\n  }\n  else\n  {\n    let diffHour = noon - (currenthour - noon)\n    inclinationNow = (diffHour - daystart) * total / (daylength/2);\n  }\n\n  return inclinationNow + 0.5\n  /*\n  azimuth\n  0.1171\n  0.3882\n\n  inclination\n  0.5\n  0.388\n  0.5\n\n  exposure\n  0.1171   */\n}\n\n// soft Shadows\nsoftShadows();\n\n//globals\nvar forestNumber = []\nconst numbertrees = 300\nconst numberclouds = 100\n\nconst Rain = ({ position, color, args, numberrain }) => {\n\n  var rainpositions = []\n  for (let i = 0; i < numberrain; i++) {\n      let rainNewPosX = getRandomInt(45);\n      let rainNewPosZ = getRandomInt(45); \n      let object = {\n        x: rainNewPosX,\n        y: 40+getRandomInt(10),\n        z: rainNewPosZ\n      }\n      rainpositions.push(object)\n  }\n\n\n  //ref to target the mesh\n  const grouprain = useRef();\n\n  //useFrame allows us to re-render/update on each frame\n  useFrame(() => {\n    if (grouprain.current == null ){\n    }\n    else\n    {\n      if (grouprain.current.position.y >= -40){\n        grouprain.current.position.y = grouprain.current.position.y -= 1.2\n      }\n      else\n      {\n        grouprain.current.position.y = 5;\n      }\n    }\n  });\n\n  //Basic expand state\n  const [expand, setExpand] = useState(false);\n  // React spring expand animation\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1],\n  });\n  return  (\n    <group ref={grouprain}>\n      { rainpositions.map((d, index) =>  (\n      <a.mesh\n        position={[d.x, d.y, d.z]}\n        key={index}\n        onClick={() => setExpand(!expand)}\n        scale={props.scale}\n        castShadow>\n        <boxBufferGeometry attach='geometry' args={args} />\n        <meshBasicMaterial color={color} />\n      </a.mesh>\n    ))}\n    </group>\n  );\n};\n\nconst Snow = ({ position, color, args, numbersnow }) => {\n\n  var snowpositions = []\n  for (let i = 0; i < numbersnow; i++) {\n      let snowNewPosX = getRandomInt(45);\n      let snowNewPosZ = getRandomInt(45); \n      let object = {\n        x: snowNewPosX,\n        y: 40+getRandomInt(10),\n        z: snowNewPosZ\n      }\n      snowpositions.push(object)\n  }\n\n\n  //ref to target the mesh\n  const groupsnow = useRef();\n\n  //useFrame allows us to re-render/update on each frame\n  useFrame(() => {\n    if (groupsnow.current == null ){\n      //console.log(\"groupsnow null\")\n    }\n    else\n    {\n      if (groupsnow.current.position.y >= -40){\n        groupsnow.current.position.y = groupsnow.current.position.y -= 1.2\n      }\n      else\n      {\n        groupsnow.current.position.y = 5;\n      }\n    }\n  });\n\n  //Basic expand state\n  const [expand, setExpand] = useState(false);\n  // React spring expand animation\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1],\n  });\n  return  (\n    <group ref={groupsnow}>\n      { snowpositions.map((d, index) =>  (\n      <a.mesh\n        position={[d.x, d.y, d.z]}\n        key={index}\n        onClick={() => setExpand(!expand)}\n        scale={props.scale}\n        castShadow>\n        <sphereBufferGeometry attach='geometry' args={args} />\n        <meshBasicMaterial color={color} />\n      </a.mesh>\n    ))}\n    </group>\n  );\n};\n\nfunction Clouds(props, color, number) {\n  var cloudpositions = []\n  for (let i = 0; i < props.number; i++) {\n      let cloudNewPosX = getRandomInt(45);\n      let cloudNewPosY = 50+getRandomInt(15); \n      let cloudNewPosZ = getRandomInt(45);\n      let object = {\n        x: cloudNewPosX,\n        y: cloudNewPosY,\n        z: cloudNewPosZ\n      } \n      cloudpositions.push(object)\n  }\n\n  const groupclouds = useRef();\n\n  //Basic expand state\n  const [expand, setExpand] = useState(false);\n\n  return  (\n    <group ref={groupclouds}>\n      { cloudpositions.map((d, index) =>  (\n      <a.mesh\n        position={[d.x, d.y, d.z]}\n        key={index}\n        onClick={() => setExpand(!expand)}\n        scale={[ 20, 8, 20 ]}\n        castShadow\n        receiveshadow>\n        <boxBufferGeometry attach=\"geometry\" args={d.args} />\n        <a.meshPhysicalMaterial attach=\"material\" color={props.color} roughness={0} opacity={0.8} transparent={true} />\n      </a.mesh>\n    ))}\n    </group>\n  );\n}\n/*\nfunction Dolly() {\n  // This one makes the camera move in and out\n  useFrame(({ camera }) => {\n    camera.position.z = 200\n  })\n  return null\n}*/\n\nfunction Lights() {\n  return (\n    <group>\n      <pointLight intensity={1} />\n      <ambientLight intensity={0.3} />\n      <spotLight\n        castShadow\n        intensity={0.1}\n        angle={Math.PI / 7}\n        position={[150, 150, 250]}\n        penumbra={1}\n        shadow-mapSize-width={2048}\n        shadow-mapSize-height={2048}\n      />\n    </group>\n  )\n}\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max)) - Math.floor(Math.random() * Math.floor(max));\n}\n\nclass Home extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n          rise: '8',\n          set: null,\n          daylight: '10',\n          numberclouds: null,\n          temperature: '0',\n          town: 'Undefined',\n          weather: {},\n        }\n    }\n\n    async componentDidMount() {\n\n      var data = JSON.stringify({\"city\": this.props.town});\n      // https://api.openweathermap.org/data/2.5/weather?q=toronto&appid=8d23c2c814d8bc6ea19d77c49f3cc746\n      var config = {\n        method: 'post',\n        url: 'http://localhost:8087/weather',\n        headers: { \n          'Content-Type': 'application/json'\n        },\n        data : data\n      };\n\n      let meteodata\n\n      await axios(config).then(function (response) {\n        const meteo = response.data\n        meteodata = meteo\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n\n      console.log(\"METEODATA : \"+meteodata)\n\n      this.setState({\n        rise: JSON.stringify(meteodata.sun.rise),\n        set: JSON.stringify(meteodata.sun.set),\n        daylight: JSON.stringify(meteodata.sun.daylight),\n        numberclouds: Number(JSON.stringify(meteodata.weather.clouds.all)),\n        temperature: String((Number(JSON.stringify(meteodata.weather.main.temp))-273.15).toFixed(2)),\n        weather: JSON.stringify(meteodata.weather.weather[0]),\n        town: this.props.town,\n      })\n    }\n    homeUppercase(val='Undefined'){\n      val = val.toUpperCase()\n      return val\n    }\n    render(){\n        return(\n          <div className=\"fixedCanvas\" >\n            <Canvas style={{height:\"100vh\",width:\"100vw\",backgroundColor:\"#abfff5\"}}>\n            <Sky\n              distance={45000} // Camera distance (default=450000)\n              inclination={inclination(this.state.rise, this.state.daylight)} // Sun elevation angle from 0 to 1 (default=0)\n              azimuth={azimuth(this.state.rise, this.state.daylight, this.state.weather )} // Sun rotation around the Y axis from 0 to 1 (default=0.25)\n              turbidity={20}\n              rayleigh={4}\n              exposure={1000}\n            />\n            <Lights />\n            <OrbitControls minDistance={[180]} maxDistance={[300]}/>\n            <Trees treecolor={this.props.treecolor}/>\n            <Clouds color={this.props.cloudscolor} number={this.state.numberclouds}/>\n            <Text \n              location={this.homeUppercase(this.state.town)} night={night}\n              temperature={this.state.temperature + \" °\"}\n            />\n            <Snow\n                color='white'\n                args={[1, 1, 1]}\n                numbersnow = {this.props.snow}\n            />\n            <Rain\n                color='grey'\n                args={[0.3, 10, 0.3]}\n                numberrain = {this.props.rain}\n            />\n            <Map \n              terraincolor={this.props.terraincolor} \n              fieldcolor={this.props.fieldcolor}\n              roadcolor={this.props.roadcolor}\n            />\n            {night = true &&\n              <Stars\n                radius={200} // Radius of the inner sphere (default=100)\n                depth={50} // Depth of area where stars should fit (default=50)\n                count={5000} // Amount of stars (default=5000)\n                factor={4} // Size factor (default=4)\n                saturation={0} // Saturation 0-1 (default=0)\n                fade // Faded dots (default=false)\n              />\n            }\n              <Farm />\n              <Twitter />\n              <Disc />\n              <AmericanFlag/>\n          </Canvas>\n          </div>\n        )\n    }\n}\n\nexport default Home;\n\n/*<Stars\nradius={100} // Radius of the inner sphere (default=100)\ndepth={50} // Depth of area where stars should fit (default=50)\ncount={5000} // Amount of stars (default=5000)\nfactor={4} // Size factor (default=4)\nsaturation={0} // Saturation 0-1 (default=0)\nfade // Faded dots (default=false)\n\n  \n            <Farm />\n\n            <Rain\n                color='grey'\n                args={[0.3, 10, 0.3]}\n                numberrain = {this.props.rain}\n            />\n            <Snow\n                color='white'\n                args={[1, 1, 1]}\n                numbersnow = {this.props.snow}\n            />\n            <Suspense fallback={null}>\n              <TwitterBird position={[100, 100, 10]} rotation={[-0.5, 0.5, 0]}/>\n            </Suspense>\n<Groupfarm scale={[0.02, 0.02, 0.02]} position={[3, 5, -3]}/>\n            \n\n/>*/"]},"metadata":{},"sourceType":"module"}