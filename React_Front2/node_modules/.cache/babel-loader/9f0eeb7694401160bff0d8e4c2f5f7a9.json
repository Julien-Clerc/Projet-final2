{"ast":null,"code":"var _jsxFileName = \"/Users/vincent/frontwidgets2/projet/React_Front2/src/components/three/Mist.jsx\",\n    _s = $RefreshSig$();\n\nimport * as THREE from 'three';\nimport React, { useRef, Component, useState } from 'react';\nimport { a } from 'react-spring/three';\nimport getRandomInt from './utils/getRandomInt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Mist(mistTrue) {\n  _s();\n\n  console.log(\"MISTCHECKER \" + Number(mistTrue));\n\n  if (mistTrue == 1) {}\n\n  let numbermist = 100;\n  var mistpositions = [];\n\n  for (let i = 0; i < numbermist; i++) {\n    let mistNewPosX = getRandomInt(45);\n    let mistNewPosY = getRandomInt(25) + 10;\n    let mistNewPosZ = getRandomInt(45);\n    let object = {\n      x: mistNewPosX,\n      y: mistNewPosY,\n      z: mistNewPosZ\n    };\n    mistpositions.push(object);\n  }\n\n  const groupmist = useRef(); //Basic expand state\n\n  const [expand, setExpand] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: groupmist,\n    children: mistpositions.map((d, index) => /*#__PURE__*/_jsxDEV(a.mesh, {\n      position: [d.x, d.y, d.z],\n      onClick: () => setExpand(!expand),\n      scale: [20, 10, 20],\n      castShadow: true,\n      children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n        attach: \"geometry\",\n        args: d.args\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(a.meshPhysicalMaterial, {\n        attach: \"material\",\n        color: '#ffffff',\n        opacity: 0.1,\n        transparent: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Mist, \"Z4eJcJhs9yeKDoRFsGCtTQY6+P4=\");\n\n_c = Mist;\n\nclass Trees extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Mist, {\n      mistTrue: this.props.mistTrue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Trees;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mist\");","map":{"version":3,"sources":["/Users/vincent/frontwidgets2/projet/React_Front2/src/components/three/Mist.jsx"],"names":["THREE","React","useRef","Component","useState","a","getRandomInt","Mist","mistTrue","console","log","Number","numbermist","mistpositions","i","mistNewPosX","mistNewPosY","mistNewPosZ","object","x","y","z","push","groupmist","expand","setExpand","map","d","index","args","Trees","constructor","props","render"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,CAAT,QAAkB,oBAAlB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;;;AAEA,SAASC,IAAT,CAAcC,QAAd,EAAwB;AAAA;;AACpBC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAeC,MAAM,CAACH,QAAD,CAAjC;;AACA,MAAKA,QAAQ,IAAI,CAAjB,EAAmB,CAAE;;AACjB,MAAII,UAAU,GAAC,GAAf;AACA,MAAIC,aAAa,GAAG,EAApB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,UAApB,EAAgCE,CAAC,EAAjC,EAAqC;AACjC,QAAIC,WAAW,GAAGT,YAAY,CAAC,EAAD,CAA9B;AACA,QAAIU,WAAW,GAAGV,YAAY,CAAC,EAAD,CAAZ,GAAiB,EAAnC;AACA,QAAIW,WAAW,GAAGX,YAAY,CAAC,EAAD,CAA9B;AACA,QAAIY,MAAM,GAAG;AACbC,MAAAA,CAAC,EAAEJ,WADU;AAEbK,MAAAA,CAAC,EAAEJ,WAFU;AAGbK,MAAAA,CAAC,EAAEJ;AAHU,KAAb;AAKAJ,IAAAA,aAAa,CAACS,IAAd,CAAmBJ,MAAnB;AACH;;AAEL,QAAMK,SAAS,GAAGrB,MAAM,EAAxB,CAjBoB,CAmBpB;;AACA,QAAM,CAACsB,MAAD,EAASC,SAAT,IAAsBrB,QAAQ,CAAC,KAAD,CAApC;AAEA,sBACE;AAAO,IAAA,GAAG,EAAEmB,SAAZ;AAAA,cACIV,aAAa,CAACa,GAAd,CAAkB,CAACC,CAAD,EAAIC,KAAJ,kBACpB,QAAC,CAAD,CAAG,IAAH;AACE,MAAA,QAAQ,EAAE,CAACD,CAAC,CAACR,CAAH,EAAMQ,CAAC,CAACP,CAAR,EAAWO,CAAC,CAACN,CAAb,CADZ;AAGE,MAAA,OAAO,EAAE,MAAMI,SAAS,CAAC,CAACD,MAAF,CAH1B;AAIE,MAAA,KAAK,EAAE,CAAE,EAAF,EAAM,EAAN,EAAU,EAAV,CAJT;AAKE,MAAA,UAAU,MALZ;AAAA,8BAME;AAAmB,QAAA,MAAM,EAAC,UAA1B;AAAqC,QAAA,IAAI,EAAEG,CAAC,CAACE;AAA7C;AAAA;AAAA;AAAA;AAAA,cANF,eAOE,QAAC,CAAD,CAAG,oBAAH;AAAwB,QAAA,MAAM,EAAC,UAA/B;AAA0C,QAAA,KAAK,EAAE,SAAjD;AAA4D,QAAA,OAAO,EAAE,GAArE;AAA0E,QAAA,WAAW,EAAE;AAAvF;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA,OAEOD,KAFP;AAAA;AAAA;AAAA;AAAA,YADE;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAeH;;GArCQrB,I;;KAAAA,I;;AAuCT,MAAMuB,KAAN,SAAoB3B,SAApB,CAA8B;AAC1B4B,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACH;;AACDC,EAAAA,MAAM,GAAE;AACJ,wBACI,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWxB;AAA3B;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;;AARyB;;AAW9B,eAAesB,KAAf","sourcesContent":["import * as THREE from 'three'\nimport React, { useRef, Component, useState } from 'react'\nimport { a } from 'react-spring/three'\nimport getRandomInt from './utils/getRandomInt'\n\nfunction Mist(mistTrue) {\n    console.log(\"MISTCHECKER \"+Number(mistTrue))\n    if ( mistTrue == 1){}\n        let numbermist=100\n        var mistpositions = []\n        for (let i = 0; i < numbermist; i++) {\n            let mistNewPosX = getRandomInt(45);\n            let mistNewPosY = getRandomInt(25)+10; \n            let mistNewPosZ = getRandomInt(45);\n            let object = {\n            x: mistNewPosX,\n            y: mistNewPosY,\n            z: mistNewPosZ\n            } \n            mistpositions.push(object)\n        }\n\n    const groupmist = useRef();\n\n    //Basic expand state\n    const [expand, setExpand] = useState(false);\n  \n    return  (\n      <group ref={groupmist}>\n        { mistpositions.map((d, index) =>  (\n        <a.mesh\n          position={[d.x, d.y, d.z]}\n          key={index}\n          onClick={() => setExpand(!expand)}\n          scale={[ 20, 10, 20 ]}\n          castShadow>\n          <boxBufferGeometry attach=\"geometry\" args={d.args} />\n          <a.meshPhysicalMaterial attach=\"material\" color={'#ffffff'} opacity={0.1} transparent={true} />\n        </a.mesh>\n      ))}\n      </group>\n    );\n}\n    \nclass Trees extends Component {\n    constructor(props){\n        super(props)\n    }\n    render(){\n        return(\n            <Mist mistTrue={this.props.mistTrue}/>\n        )\n    }\n}\n\nexport default Trees;"]},"metadata":{},"sourceType":"module"}