{"ast":null,"code":"import { ShaderMaterial, Vector2, Uniform, NoBlending } from 'three';\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\nclass ConvolutionMaterial extends ShaderMaterial {\n  constructor(texelSize = new Vector2()) {\n    super({\n      uniforms: {\n        inputBuffer: new Uniform(null),\n        texelSize: new Uniform(new Vector2()),\n        halfTexelSize: new Uniform(new Vector2()),\n        kernel: new Uniform(0.0),\n        scale: new Uniform(1.0)\n      },\n      fragmentShader: \"#include <common>\\n        #include <dithering_pars_fragment>      \\n        uniform sampler2D inputBuffer;\\n        varying vec2 vUv0;\\n        varying vec2 vUv1;\\n        varying vec2 vUv2;\\n        varying vec2 vUv3;\\n        void main() {\\n          vec4 sum = texture2D(inputBuffer, vUv0);\\n          sum += texture2D(inputBuffer, vUv1);\\n          sum += texture2D(inputBuffer, vUv2);\\n          sum += texture2D(inputBuffer, vUv3);\\n          gl_FragColor = sum * 0.25;\\n          #include <dithering_fragment>\\n        }\",\n      vertexShader: \"uniform vec2 texelSize;\\n        uniform vec2 halfTexelSize;\\n        uniform float kernel;\\n        uniform float scale;\\n        varying vec2 vUv0;\\n        varying vec2 vUv1;\\n        varying vec2 vUv2;\\n        varying vec2 vUv3;\\n        void main() {\\n          vec2 uv = position.xy * 0.5 + 0.5;\\n          vec2 dUv = (texelSize * vec2(kernel) + halfTexelSize) * scale;\\n          vUv0 = vec2(uv.x - dUv.x, uv.y + dUv.y);\\n          vUv1 = vec2(uv.x + dUv.x, uv.y + dUv.y);\\n          vUv2 = vec2(uv.x + dUv.x, uv.y - dUv.y);\\n          vUv3 = vec2(uv.x - dUv.x, uv.y - dUv.y);\\n          gl_Position = vec4(position.xy, 1.0, 1.0);\\n        }\",\n      blending: NoBlending,\n      depthWrite: false,\n      depthTest: false\n    });\n\n    _defineProperty(this, \"kernel\", void 0);\n\n    this.toneMapped = false;\n    this.setTexelSize(texelSize.x, texelSize.y);\n    this.kernel = new Float32Array([0.0, 1.0, 2.0, 2.0, 3.0]);\n  }\n\n  setTexelSize(x, y) {\n    this.uniforms.texelSize.value.set(x, y);\n    this.uniforms.halfTexelSize.value.set(x, y).multiplyScalar(0.5);\n  }\n\n}\n\nexport { ConvolutionMaterial };","map":{"version":3,"sources":["/home/julien/Rendu/ETP/React_Front2/node_modules/@react-three/drei/materials/ConvolutionMaterial.js"],"names":["ShaderMaterial","Vector2","Uniform","NoBlending","_defineProperty","ConvolutionMaterial","constructor","texelSize","uniforms","inputBuffer","halfTexelSize","kernel","scale","fragmentShader","vertexShader","blending","depthWrite","depthTest","toneMapped","setTexelSize","x","y","Float32Array","value","set","multiplyScalar"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,OAAzB,EAAkCC,OAAlC,EAA2CC,UAA3C,QAA6D,OAA7D;AACA,OAAOC,eAAP,MAA4B,2CAA5B;;AAEA,MAAMC,mBAAN,SAAkCL,cAAlC,CAAiD;AAC/CM,EAAAA,WAAW,CAACC,SAAS,GAAG,IAAIN,OAAJ,EAAb,EAA4B;AACrC,UAAM;AACJO,MAAAA,QAAQ,EAAE;AACRC,QAAAA,WAAW,EAAE,IAAIP,OAAJ,CAAY,IAAZ,CADL;AAERK,QAAAA,SAAS,EAAE,IAAIL,OAAJ,CAAY,IAAID,OAAJ,EAAZ,CAFH;AAGRS,QAAAA,aAAa,EAAE,IAAIR,OAAJ,CAAY,IAAID,OAAJ,EAAZ,CAHP;AAIRU,QAAAA,MAAM,EAAE,IAAIT,OAAJ,CAAY,GAAZ,CAJA;AAKRU,QAAAA,KAAK,EAAE,IAAIV,OAAJ,CAAY,GAAZ;AALC,OADN;AAQJW,MAAAA,cAAc,EAAE,khBARZ;AASJC,MAAAA,YAAY,EAAE,2oBATV;AAUJC,MAAAA,QAAQ,EAAEZ,UAVN;AAWJa,MAAAA,UAAU,EAAE,KAXR;AAYJC,MAAAA,SAAS,EAAE;AAZP,KAAN;;AAeAb,IAAAA,eAAe,CAAC,IAAD,EAAO,QAAP,EAAiB,KAAK,CAAtB,CAAf;;AAEA,SAAKc,UAAL,GAAkB,KAAlB;AACA,SAAKC,YAAL,CAAkBZ,SAAS,CAACa,CAA5B,EAA+Bb,SAAS,CAACc,CAAzC;AACA,SAAKV,MAAL,GAAc,IAAIW,YAAJ,CAAiB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,CAAjB,CAAd;AACD;;AAEDH,EAAAA,YAAY,CAACC,CAAD,EAAIC,CAAJ,EAAO;AACjB,SAAKb,QAAL,CAAcD,SAAd,CAAwBgB,KAAxB,CAA8BC,GAA9B,CAAkCJ,CAAlC,EAAqCC,CAArC;AACA,SAAKb,QAAL,CAAcE,aAAd,CAA4Ba,KAA5B,CAAkCC,GAAlC,CAAsCJ,CAAtC,EAAyCC,CAAzC,EAA4CI,cAA5C,CAA2D,GAA3D;AACD;;AA3B8C;;AA+BjD,SAASpB,mBAAT","sourcesContent":["import { ShaderMaterial, Vector2, Uniform, NoBlending } from 'three';\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\nclass ConvolutionMaterial extends ShaderMaterial {\n  constructor(texelSize = new Vector2()) {\n    super({\n      uniforms: {\n        inputBuffer: new Uniform(null),\n        texelSize: new Uniform(new Vector2()),\n        halfTexelSize: new Uniform(new Vector2()),\n        kernel: new Uniform(0.0),\n        scale: new Uniform(1.0)\n      },\n      fragmentShader: \"#include <common>\\n        #include <dithering_pars_fragment>      \\n        uniform sampler2D inputBuffer;\\n        varying vec2 vUv0;\\n        varying vec2 vUv1;\\n        varying vec2 vUv2;\\n        varying vec2 vUv3;\\n        void main() {\\n          vec4 sum = texture2D(inputBuffer, vUv0);\\n          sum += texture2D(inputBuffer, vUv1);\\n          sum += texture2D(inputBuffer, vUv2);\\n          sum += texture2D(inputBuffer, vUv3);\\n          gl_FragColor = sum * 0.25;\\n          #include <dithering_fragment>\\n        }\",\n      vertexShader: \"uniform vec2 texelSize;\\n        uniform vec2 halfTexelSize;\\n        uniform float kernel;\\n        uniform float scale;\\n        varying vec2 vUv0;\\n        varying vec2 vUv1;\\n        varying vec2 vUv2;\\n        varying vec2 vUv3;\\n        void main() {\\n          vec2 uv = position.xy * 0.5 + 0.5;\\n          vec2 dUv = (texelSize * vec2(kernel) + halfTexelSize) * scale;\\n          vUv0 = vec2(uv.x - dUv.x, uv.y + dUv.y);\\n          vUv1 = vec2(uv.x + dUv.x, uv.y + dUv.y);\\n          vUv2 = vec2(uv.x + dUv.x, uv.y - dUv.y);\\n          vUv3 = vec2(uv.x - dUv.x, uv.y - dUv.y);\\n          gl_Position = vec4(position.xy, 1.0, 1.0);\\n        }\",\n      blending: NoBlending,\n      depthWrite: false,\n      depthTest: false\n    });\n\n    _defineProperty(this, \"kernel\", void 0);\n\n    this.toneMapped = false;\n    this.setTexelSize(texelSize.x, texelSize.y);\n    this.kernel = new Float32Array([0.0, 1.0, 2.0, 2.0, 3.0]);\n  }\n\n  setTexelSize(x, y) {\n    this.uniforms.texelSize.value.set(x, y);\n    this.uniforms.halfTexelSize.value.set(x, y).multiplyScalar(0.5);\n  }\n\n}\n\nexport { ConvolutionMaterial };\n"]},"metadata":{},"sourceType":"module"}