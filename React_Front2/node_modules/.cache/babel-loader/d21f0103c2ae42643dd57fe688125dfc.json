{"ast":null,"code":"var _jsxFileName = \"/home/julien/Rendu/ETP/React_Front2/src/context.js\";\n// store/UserProvider.js\nimport React, { createContext, Component } from \"react\"; // on importe createContext qui servira à la création d'un ou plusieurs contextes\n\n/**\n * `createContext` contient 2 propriétés :\n * `Provider` et `Consumer`. Nous les rendons accessibles\n * via la constante `UserContext` et on initialise une\n * propriété par défaut \"name\" qui sera une chaîne vide.\n * On exporte ce contexte afin qu'il soit exploitable par\n * d'autres composants par la suite via le `Consumer`\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThreeContext = /*#__PURE__*/createContext({\n  newRadioUrl: \"\",\n  setOnoff: () => {}\n});\n/* la classe UserProvider fera office de... Provider (!)\n * en englobant son enfant direct\n * dans le composant éponyme. De cette façon, ses values\n * seront accessibles de manière globale via le `Consumer`\n */\n\nclass Context extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      radio: \"off\",\n      // une valeur de départ\n      setOnoff: radio => this.setState({\n        radio: radio\n      }) // nouvelle propriété de mutation\n\n    };\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // Ici, rien ne change !\n      _jsxDEV(ThreeContext.Provider, {\n        value: this.state,\n        children: this.props.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)\n    );\n  }\n\n}\n\nexport default Context;","map":{"version":3,"sources":["/home/julien/Rendu/ETP/React_Front2/src/context.js"],"names":["React","createContext","Component","ThreeContext","newRadioUrl","setOnoff","Context","constructor","props","state","radio","setState","render","children"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,QAAgD,OAAhD,C,CAAyD;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,YAAY,gBAAGF,aAAa,CAAC;AACxCG,EAAAA,WAAW,EAAE,EAD2B;AAExCC,EAAAA,QAAQ,EAAE,MAAM,CAAE;AAFsB,CAAD,CAAlC;AAKP;AACA;AACA;AACA;AACA;;AACA,MAAMC,OAAN,SAAsBJ,SAAtB,CAAgC;AAC5BK,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,KADE;AACK;AACdL,MAAAA,QAAQ,EAAEK,KAAK,IAAI,KAAKC,QAAL,CAAc;AAAED,QAAAA,KAAK,EAAEA;AAAT,OAAd,CAFV,CAE0C;;AAF1C,KAAb;AAIH;;AACDE,EAAAA,MAAM,GAAG;AACL;AAAA;AACE;AACA,cAAC,YAAD,CAAc,QAAd;AAAuB,QAAA,KAAK,EAAE,KAAKH,KAAnC;AAAA,kBACG,KAAKD,KAAL,CAAWK;AADd;AAAA;AAAA;AAAA;AAAA;AAFF;AAMH;;AAf2B;;AAkBhC,eAAeP,OAAf","sourcesContent":["// store/UserProvider.js\nimport React, { createContext, Component } from \"react\"; // on importe createContext qui servira à la création d'un ou plusieurs contextes\n\n/**\n * `createContext` contient 2 propriétés :\n * `Provider` et `Consumer`. Nous les rendons accessibles\n * via la constante `UserContext` et on initialise une\n * propriété par défaut \"name\" qui sera une chaîne vide.\n * On exporte ce contexte afin qu'il soit exploitable par\n * d'autres composants par la suite via le `Consumer`\n */\nexport const ThreeContext = createContext({\n  newRadioUrl: \"\",\n  setOnoff: () => {}\n})\n\n/* la classe UserProvider fera office de... Provider (!)\n * en englobant son enfant direct\n * dans le composant éponyme. De cette façon, ses values\n * seront accessibles de manière globale via le `Consumer`\n */\nclass Context extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            radio: \"off\", // une valeur de départ\n            setOnoff: radio => this.setState({ radio: radio }) // nouvelle propriété de mutation\n        };\n    }\n    render() {\n        return (\n          // Ici, rien ne change !\n          <ThreeContext.Provider value={this.state}>\n            {this.props.children}\n          </ThreeContext.Provider>\n        );\n    }\n}\n\nexport default Context\n\n"]},"metadata":{},"sourceType":"module"}