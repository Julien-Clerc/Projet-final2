{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport { useRef, useState, useCallback, useMemo, createElement } from 'react';\nimport { Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, LinearFilter, RGBFormat, WebGLRenderTarget, DepthTexture, DepthFormat, UnsignedShortType } from 'three';\nimport { extend, useThree, useFrame } from 'react-three-fiber';\nimport { BlurPass } from '../materials/BlurPass.js';\nimport { MeshReflectorMaterial } from '../materials/MeshReflectorMaterial.js';\nextend({\n  MeshReflectorMaterial\n});\n\nfunction Reflector(_ref) {\n  let {\n    mixBlur = 0.0,\n    mixStrength = 0.5,\n    resolution = 256,\n    blur = [0, 0],\n    args = [1, 1],\n    minDepthThreshold = 0.9,\n    maxDepthThreshold = 1,\n    depthScale = 0,\n    mirror,\n    children\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, [\"mixBlur\", \"mixStrength\", \"resolution\", \"blur\", \"args\", \"minDepthThreshold\", \"maxDepthThreshold\", \"depthScale\", \"mirror\", \"children\"]);\n\n  blur = Array.isArray(blur) ? blur : [blur, blur];\n  const hasBlur = blur[0] + blur[1] > 0;\n  const meshRef = useRef(null);\n  const [reflectorPlane] = useState(() => new Plane());\n  const [normal] = useState(() => new Vector3());\n  const [reflectorWorldPosition] = useState(() => new Vector3());\n  const [cameraWorldPosition] = useState(() => new Vector3());\n  const [rotationMatrix] = useState(() => new Matrix4());\n  const [lookAtPosition] = useState(() => new Vector3(0, 0, -1));\n  const [clipPlane] = useState(() => new Vector4());\n  const [view] = useState(() => new Vector3());\n  const [target] = useState(() => new Vector3());\n  const [q] = useState(() => new Vector4());\n  const [textureMatrix] = useState(() => new Matrix4());\n  const [virtualCamera] = useState(() => new PerspectiveCamera());\n  const {\n    gl,\n    scene,\n    camera\n  } = useThree();\n  const beforeRender = useCallback(() => {\n    reflectorWorldPosition.setFromMatrixPosition(meshRef.current.matrixWorld);\n    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n    rotationMatrix.extractRotation(meshRef.current.matrixWorld);\n    normal.set(0, 0, 1);\n    normal.applyMatrix4(rotationMatrix);\n    view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n    if (view.dot(normal) > 0) return;\n    view.reflect(normal).negate();\n    view.add(reflectorWorldPosition);\n    rotationMatrix.extractRotation(camera.matrixWorld);\n    lookAtPosition.set(0, 0, -1);\n    lookAtPosition.applyMatrix4(rotationMatrix);\n    lookAtPosition.add(cameraWorldPosition);\n    target.subVectors(reflectorWorldPosition, lookAtPosition);\n    target.reflect(normal).negate();\n    target.add(reflectorWorldPosition);\n    virtualCamera.position.copy(view);\n    virtualCamera.up.set(0, 1, 0);\n    virtualCamera.up.applyMatrix4(rotationMatrix);\n    virtualCamera.up.reflect(normal);\n    virtualCamera.lookAt(target);\n    virtualCamera.far = camera.far; // Used in WebGLBackground\n\n    virtualCamera.updateMatrixWorld();\n    virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    textureMatrix.multiply(virtualCamera.projectionMatrix);\n    textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n    textureMatrix.multiply(meshRef.current.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n    const projectionMatrix = virtualCamera.projectionMatrix;\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    q.z = -1.0;\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n    projectionMatrix.elements[2] = clipPlane.x;\n    projectionMatrix.elements[6] = clipPlane.y;\n    projectionMatrix.elements[10] = clipPlane.z + 1.0;\n    projectionMatrix.elements[14] = clipPlane.w; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const [fbo1, fbo2, blurpass, reflectorProps] = useMemo(() => {\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat,\n      encoding: gl.outputEncoding\n    };\n    const fbo1 = new WebGLRenderTarget(resolution, resolution, parameters);\n    fbo1.depthBuffer = true;\n    fbo1.depthTexture = new DepthTexture(resolution, resolution);\n    fbo1.depthTexture.format = DepthFormat;\n    fbo1.depthTexture.type = UnsignedShortType;\n    const fbo2 = new WebGLRenderTarget(resolution, resolution, parameters);\n    const blurpass = new BlurPass({\n      gl,\n      resolution,\n      width: blur[0],\n      height: blur[1]\n    });\n    const reflectorProps = {\n      mirror,\n      textureMatrix,\n      mixBlur,\n      tDiffuse: fbo1.texture,\n      tDepth: fbo1.depthTexture,\n      tDiffuseBlur: fbo2.texture,\n      hasBlur,\n      mixStrength,\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale\n    };\n    return [fbo1, fbo2, blurpass, reflectorProps];\n  }, [gl, blur, textureMatrix, resolution, mirror, hasBlur, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale]);\n  useFrame(() => {\n    if (!(meshRef == null ? void 0 : meshRef.current)) return;\n    meshRef.current.visible = false;\n    beforeRender();\n    gl.setRenderTarget(fbo1);\n    gl.render(scene, virtualCamera);\n    if (hasBlur) blurpass.render(gl, fbo1, fbo2);\n    meshRef.current.visible = true;\n    gl.setRenderTarget(null);\n  });\n  return /*#__PURE__*/createElement(\"mesh\", _extends({\n    ref: meshRef\n  }, props), /*#__PURE__*/createElement(\"planeBufferGeometry\", {\n    args: args\n  }), children ? children('meshReflectorMaterial', reflectorProps) : /*#__PURE__*/createElement(\"meshReflectorMaterial\", reflectorProps));\n}\n\nexport { Reflector };","map":{"version":3,"sources":["/home/julien/Rendu/ETP/React_Front2/node_modules/@react-three/drei/core/Reflector.js"],"names":["_extends","_objectWithoutPropertiesLoose","useRef","useState","useCallback","useMemo","createElement","Plane","Vector3","Matrix4","Vector4","PerspectiveCamera","LinearFilter","RGBFormat","WebGLRenderTarget","DepthTexture","DepthFormat","UnsignedShortType","extend","useThree","useFrame","BlurPass","MeshReflectorMaterial","Reflector","_ref","mixBlur","mixStrength","resolution","blur","args","minDepthThreshold","maxDepthThreshold","depthScale","mirror","children","props","Array","isArray","hasBlur","meshRef","reflectorPlane","normal","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","view","target","q","textureMatrix","virtualCamera","gl","scene","camera","beforeRender","setFromMatrixPosition","current","matrixWorld","extractRotation","set","applyMatrix4","subVectors","dot","reflect","negate","add","position","copy","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","x","y","z","constant","Math","sign","elements","w","multiplyScalar","fbo1","fbo2","blurpass","reflectorProps","parameters","minFilter","magFilter","format","encoding","outputEncoding","depthBuffer","depthTexture","type","width","height","tDiffuse","texture","tDepth","tDiffuseBlur","visible","setRenderTarget","render","ref"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport { useRef, useState, useCallback, useMemo, createElement } from 'react';\nimport { Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, LinearFilter, RGBFormat, WebGLRenderTarget, DepthTexture, DepthFormat, UnsignedShortType } from 'three';\nimport { extend, useThree, useFrame } from 'react-three-fiber';\nimport { BlurPass } from '../materials/BlurPass.js';\nimport { MeshReflectorMaterial } from '../materials/MeshReflectorMaterial.js';\n\nextend({\n  MeshReflectorMaterial\n});\nfunction Reflector(_ref) {\n  let {\n    mixBlur = 0.0,\n    mixStrength = 0.5,\n    resolution = 256,\n    blur = [0, 0],\n    args = [1, 1],\n    minDepthThreshold = 0.9,\n    maxDepthThreshold = 1,\n    depthScale = 0,\n    mirror,\n    children\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, [\"mixBlur\", \"mixStrength\", \"resolution\", \"blur\", \"args\", \"minDepthThreshold\", \"maxDepthThreshold\", \"depthScale\", \"mirror\", \"children\"]);\n\n  blur = Array.isArray(blur) ? blur : [blur, blur];\n  const hasBlur = blur[0] + blur[1] > 0;\n  const meshRef = useRef(null);\n  const [reflectorPlane] = useState(() => new Plane());\n  const [normal] = useState(() => new Vector3());\n  const [reflectorWorldPosition] = useState(() => new Vector3());\n  const [cameraWorldPosition] = useState(() => new Vector3());\n  const [rotationMatrix] = useState(() => new Matrix4());\n  const [lookAtPosition] = useState(() => new Vector3(0, 0, -1));\n  const [clipPlane] = useState(() => new Vector4());\n  const [view] = useState(() => new Vector3());\n  const [target] = useState(() => new Vector3());\n  const [q] = useState(() => new Vector4());\n  const [textureMatrix] = useState(() => new Matrix4());\n  const [virtualCamera] = useState(() => new PerspectiveCamera());\n  const {\n    gl,\n    scene,\n    camera\n  } = useThree();\n  const beforeRender = useCallback(() => {\n    reflectorWorldPosition.setFromMatrixPosition(meshRef.current.matrixWorld);\n    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n    rotationMatrix.extractRotation(meshRef.current.matrixWorld);\n    normal.set(0, 0, 1);\n    normal.applyMatrix4(rotationMatrix);\n    view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n    if (view.dot(normal) > 0) return;\n    view.reflect(normal).negate();\n    view.add(reflectorWorldPosition);\n    rotationMatrix.extractRotation(camera.matrixWorld);\n    lookAtPosition.set(0, 0, -1);\n    lookAtPosition.applyMatrix4(rotationMatrix);\n    lookAtPosition.add(cameraWorldPosition);\n    target.subVectors(reflectorWorldPosition, lookAtPosition);\n    target.reflect(normal).negate();\n    target.add(reflectorWorldPosition);\n    virtualCamera.position.copy(view);\n    virtualCamera.up.set(0, 1, 0);\n    virtualCamera.up.applyMatrix4(rotationMatrix);\n    virtualCamera.up.reflect(normal);\n    virtualCamera.lookAt(target);\n    virtualCamera.far = camera.far; // Used in WebGLBackground\n\n    virtualCamera.updateMatrixWorld();\n    virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    textureMatrix.multiply(virtualCamera.projectionMatrix);\n    textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n    textureMatrix.multiply(meshRef.current.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n    const projectionMatrix = virtualCamera.projectionMatrix;\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    q.z = -1.0;\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n    projectionMatrix.elements[2] = clipPlane.x;\n    projectionMatrix.elements[6] = clipPlane.y;\n    projectionMatrix.elements[10] = clipPlane.z + 1.0;\n    projectionMatrix.elements[14] = clipPlane.w; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const [fbo1, fbo2, blurpass, reflectorProps] = useMemo(() => {\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat,\n      encoding: gl.outputEncoding\n    };\n    const fbo1 = new WebGLRenderTarget(resolution, resolution, parameters);\n    fbo1.depthBuffer = true;\n    fbo1.depthTexture = new DepthTexture(resolution, resolution);\n    fbo1.depthTexture.format = DepthFormat;\n    fbo1.depthTexture.type = UnsignedShortType;\n    const fbo2 = new WebGLRenderTarget(resolution, resolution, parameters);\n    const blurpass = new BlurPass({\n      gl,\n      resolution,\n      width: blur[0],\n      height: blur[1]\n    });\n    const reflectorProps = {\n      mirror,\n      textureMatrix,\n      mixBlur,\n      tDiffuse: fbo1.texture,\n      tDepth: fbo1.depthTexture,\n      tDiffuseBlur: fbo2.texture,\n      hasBlur,\n      mixStrength,\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale\n    };\n    return [fbo1, fbo2, blurpass, reflectorProps];\n  }, [gl, blur, textureMatrix, resolution, mirror, hasBlur, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale]);\n  useFrame(() => {\n    if (!(meshRef == null ? void 0 : meshRef.current)) return;\n    meshRef.current.visible = false;\n    beforeRender();\n    gl.setRenderTarget(fbo1);\n    gl.render(scene, virtualCamera);\n    if (hasBlur) blurpass.render(gl, fbo1, fbo2);\n    meshRef.current.visible = true;\n    gl.setRenderTarget(null);\n  });\n  return /*#__PURE__*/createElement(\"mesh\", _extends({\n    ref: meshRef\n  }, props), /*#__PURE__*/createElement(\"planeBufferGeometry\", {\n    args: args\n  }), children ? children('meshReflectorMaterial', reflectorProps) : /*#__PURE__*/createElement(\"meshReflectorMaterial\", reflectorProps));\n}\n\nexport { Reflector };\n"]},"metadata":{},"sourceType":"module"}